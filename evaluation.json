[
    {
        "source": "\"\nThe\nNew\nImproved\nSMALLTALK\nSystem\nDefinition\nJune 12, 1977\n\"",
        "alto_source": "doIt [^[\"\nThe\nNew\nImproved\nSMALLTALK\nSystem\nDefinition\nJune 12, 1977\n\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"UTF-8 encoding, chunks are paragraphs separated by empty lines -- hh 30jan04\"\n\"note that the class definition doits are intentionally commented out.\"",
        "alto_source": "doIt [^[\"UTF-8 encoding, chunks are paragraphs separated by empty lines -- hh 30jan04\"\n\"note that the class definition doits are intentionally commented out.\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Host load: 'jar:/source/preboot.utf.txt'",
        "alto_source": "doIt [^[Host load: 'jar:/source/preboot.utf.txt']]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Host",
            "#load:",
            "'jar:/source/preboot.utf.txt'",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x83'"
    },
    {
        "source": "Host let: HostReflector understand: #writeOnly\n\tvia: (Host method: 'writeOnly' in: (Host class: 'st76.tools.Console')).\nSmalltalk define: #user as: Host writeOnly.\t\"to Transcript\"",
        "alto_source": "doIt [^[Host let: HostReflector understand: #writeOnly\n\tvia: (Host method: 'writeOnly' in: (Host class: 'st76.tools.Console')).\nSmalltalk define: #user as: Host writeOnly.\t\"to Transcript\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Host",
            "#let:",
            "#HostReflector",
            "#understand:",
            "##",
            "#writeOnly",
            "#via:",
            "(#Host #method: 'writeOnly' #in: (#Host #class: 'st76.tools.Console'))",
            "#.",
            "#Smalltalk",
            "#define:",
            "##",
            "#user",
            "#as:",
            "#Host",
            "#writeOnly",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x05\\x00\\x00\\x06\\x41\\x22\\x23\\x24\\x40\\xd5\\x40\\xd6\\x40\\xd7\\x82\\x29\\x40\\xda\\x48\\xdb\\x82\\x7d\\x83'"
    },
    {
        "source": "Host let: Console understand: #flush\n\tvia: (Host method: 'flush' in: Console)",
        "alto_source": "doIt [^[Host let: Console understand: #flush\n\tvia: (Host method: 'flush' in: Console)]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Host",
            "#let:",
            "#Console",
            "#understand:",
            "##",
            "#flush",
            "#via:",
            "(#Host #method: 'flush' #in: #Console)",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x05\\x00\\x00\\x06\\x41\\x22\\x23\\x41\\x40\\xd4\\x40\\xd5\\x83'"
    },
    {
        "source": "\"RAW MATERIALS\"",
        "alto_source": "doIt [^[\"RAW MATERIALS\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Object, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Object, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Object, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Object';\n\tsubclassof: nil;\n\tabstract\"",
        "alto_source": "doIt [^[\"Class new title: 'Object';\n\tsubclassof: nil;\n\tabstract\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"Object is the superclass of all classes.  It is an abstract class, meaning that it has no instance state, and its main function is to provide a foundation message protocol for its subclasses.  Three instances of this class are defined, namely: nil, true, and false.\"",
        "alto_source": "doIt [^[\"Object is the superclass of all classes.  It is an abstract class, meaning that it has no instance state, and its main function is to provide a foundation message protocol for its subclasses.  Three instances of this class are defined, namely: nil, true, and false.\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"primitives\"\nObject understands: '\u2261 x [] primitive: 4\t\"test for identical pointers\"'.\nObject understands: 'hash [] primitive: 46\t\"pointer as an Integer\"'.\nObject understands: 'asOop [] primitive: 46\t\"Dont override this\"'.\nObject understands: 'refct [] primitive: 45\t\"current reference count\"'.\nObject understands: 'class [] primitive: 27\t\"class of this object\"'.\nObject understands: 'instfield: n [] primitive: 38\t\"subscript any object\"'.\nObject understands: 'instfield: n \u2190 val [] primitive: 39'.",
        "alto_source": "doIt [^[\"primitives\"\nObject understands: '\u0006 x [] primitive: 4\t\"test for identical pointers\"'.\nObject understands: 'hash [] primitive: 46\t\"pointer as an Integer\"'.\nObject understands: 'asOop [] primitive: 46\t\"Dont override this\"'.\nObject understands: 'refct [] primitive: 45\t\"current reference count\"'.\nObject understands: 'class [] primitive: 27\t\"class of this object\"'.\nObject understands: 'instfield: n [] primitive: 38\t\"subscript any object\"'.\nObject understands: 'instfield: n _ val [] primitive: 39'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'\\006 x [] primitive: 4\\011\"test for identical pointers\"'",
            "#.",
            "#Object",
            "#understands:",
            "'hash [] primitive: 46\\011\"pointer as an Integer\"'",
            "#.",
            "#Object",
            "#understands:",
            "'asOop [] primitive: 46\\011\"Dont override this\"'",
            "#.",
            "#Object",
            "#understands:",
            "'refct [] primitive: 45\\011\"current reference count\"'",
            "#.",
            "#Object",
            "#understands:",
            "'class [] primitive: 27\\011\"class of this object\"'",
            "#.",
            "#Object",
            "#understands:",
            "'instfield: n [] primitive: 38\\011\"subscript any object\"'",
            "#.",
            "#Object",
            "#understands:",
            "'instfield: n _ val [] primitive: 39'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x26\\x40\\xd2\\x82\\x27\\x40\\xd2\\x82\\x28\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"boolean connectives\"\nObject understands: 'or: x [self\u21d2[\u21d1true] \u21d1x]'.\nObject understands: 'and: x [self\u21d2[\u21d1x] \u21d1false]'.\nObject understands: 'xor: x [x\u21d2[\u21d1self\u2261false] \u21d1self]'.\nObject understands: 'eqv: x [x\u21d2[\u21d1self] \u21d1self\u2261false]'.",
        "alto_source": "doIt [^[\"boolean connectives\"\nObject understands: 'or: x [self?[^true] ^x]'.\nObject understands: 'and: x [self?[^x] ^false]'.\nObject understands: 'xor: x [x?[^self\u0006false] ^self]'.\nObject understands: 'eqv: x [x?[^self] ^self\u0006false]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'or: x [self?[^true] ^x]'",
            "#.",
            "#Object",
            "#understands:",
            "'and: x [self?[^x] ^false]'",
            "#.",
            "#Object",
            "#understands:",
            "'xor: x [x?[^self\\006false] ^self]'",
            "#.",
            "#Object",
            "#understands:",
            "'eqv: x [x?[^self] ^self\\006false]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"following don't evaluate their arg unless necessary.\nThey are built for comfort, not for speed.\"\nObject understands: 'or% x [self\u21d2[\u21d1true] \u21d1x eval]'.\nObject understands: 'and% x [self\u21d2[\u21d1x eval] \u21d1false]'.",
        "alto_source": "doIt [^[\"following don't evaluate their arg unless necessary.\nThey are built for comfort, not for speed.\"\nObject understands: 'or% x [self?[^true] ^x eval]'.\nObject understands: 'and% x [self?[^x eval] ^false]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'or% x [self?[^true] ^x eval]'",
            "#.",
            "#Object",
            "#understands:",
            "'and% x [self?[^x eval] ^false]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"default protocol\"\nObject understands: 'printon: strm\n\t[self\u2261nil\u21d2 [strm append: ''nil'']\n\tself\u2261false\u21d2 [strm append: ''false'']\n\tself\u2261true\u21d2 [strm append: ''true'']\n\tself class print: self on: strm]'.\nObject understands: 'asString | strm\n\t[strm \u2190 Stream default.\n\tself printon: strm. \u21d1strm contents]'.\nObject understands: 'print\n\t[user show: self asString]'.",
        "alto_source": "doIt [^[\"default protocol\"\nObject understands: 'printon: strm\n\t[self\u0006nil? [strm append: ''nil'']\n\tself\u0006false? [strm append: ''false'']\n\tself\u0006true? [strm append: ''true'']\n\tself class print: self on: strm]'.\nObject understands: 'asString | strm\n\t[strm _ Stream default.\n\tself printon: strm. ^strm contents]'.\nObject understands: 'print\n\t[user show: self asString]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'printon: strm\\012\\011[self\\006nil? [strm append: 'nil']\\012\\011self\\006false? [strm append: 'false']\\012\\011self\\006true? [strm append: 'true']\\012\\011self class print: self on: strm]'",
            "#.",
            "#Object",
            "#understands:",
            "'asString | strm\\012\\011[strm _ Stream default.\\012\\011self printon: strm. ^strm contents]'",
            "#.",
            "#Object",
            "#understands:",
            "'print\\012\\011[user show: self asString]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Object understands: '= x [\u21d1self\u2261x]'.\nObject understands: '\u2260 x [\u21d1self=x\u2261false]'.\nObject understands: 'is: x [\u21d1self class\u2261x]'.",
        "alto_source": "doIt [^[Object understands: '= x [^self\u0006x]'.\nObject understands: '\u000e x [^self=x\u0006false]'.\nObject understands: 'is: x [^self class\u0006x]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'= x [^self\\006x]'",
            "#.",
            "#Object",
            "#understands:",
            "'\\016 x [^self=x\\006false]'",
            "#.",
            "#Object",
            "#understands:",
            "'is: x [^self class\\006x]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Object understands: ', x | v\n\t[v \u2190 Vector new: 2.\n\tv\u20221 \u2190 self. v\u20222 \u2190 x.  \u21d1v]'.",
        "alto_source": "doIt [^[Object understands: ', x | v\n\t[v _ Vector new: 2.\n\tv!1 _ self. v!2 _ x.  ^v]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "', x | v\\012\\011[v _ Vector new: 2.\\012\\011v!1 _ self. v!2 _ x.  ^v]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Object understands: 'startup\t\t\"loopless scheduling\"\n\t[self firsttime\u21d2\n\t\t[while% self eachtime do% [].\n\t\t\u21d1self lasttime]\n\t\u21d1false]'.",
        "alto_source": "doIt [^[Object understands: 'startup\t\t\"loopless scheduling\"\n\t[self firsttime?\n\t\t[while% self eachtime do% [].\n\t\t^self lasttime]\n\t^false]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'startup\\011\\011\"loopless scheduling\"\\012\\011[self firsttime?\\012\\011\\011[while% self eachtime do% [].\\012\\011\\011^self lasttime]\\012\\011^false]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Object understands: 'canunderstand: selector\n\t[\u21d1self class canunderstand: selector]'.",
        "alto_source": "doIt [^[Object understands: 'canunderstand: selector\n\t[^self class canunderstand: selector]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'canunderstand: selector\\012\\011[^self class canunderstand: selector]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Object understands: 'copy\t\t\"create new copy of self\"\n\t[\u21d1self class copy: self]'.\nObject understands: 'recopy\t\"recursively copy whole structure\"\n\t[\u21d1self class recopy: self]'.",
        "alto_source": "doIt [^[Object understands: 'copy\t\t\"create new copy of self\"\n\t[^self class copy: self]'.\nObject understands: 'recopy\t\"recursively copy whole structure\"\n\t[^self class recopy: self]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'copy\\011\\011\"create new copy of self\"\\012\\011[^self class copy: self]'",
            "#.",
            "#Object",
            "#understands:",
            "'recopy\\011\"recursively copy whole structure\"\\012\\011[^self class recopy: self]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Object understands: 'error\n\t[user notify: ''Message not understood.'']'.",
        "alto_source": "doIt [^[Object understands: 'error\n\t[user notify: ''Message not understood.'']'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'error\\012\\011[user notify: 'Message not understood.']'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Object understands: 'its: code\t\"\u00b4s\"\n\t[self class understands: ''doit [\u21d1['' + code + '']]''.\n\t\u21d1self doit]'.",
        "alto_source": "doIt [^[Object understands: 'its: code\t\"\u00b4s\"\n\t[self class understands: ''doit [^['' + code + '']]''.\n\t^self doit]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Object",
            "#understands:",
            "'its: code\\011\"\\264s\"\\012\\011[self class understands: 'doit [^[' + code + ']]'.\\012\\011^self doit]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"FUNDAMENTAL ORGANIZATION\"",
        "alto_source": "doIt [^[\"FUNDAMENTAL ORGANIZATION\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Class, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Class, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Class, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Class';\n\tfields: 'title\t\"\"<String> for identification, printing\"\"\n\t\tmyinstvars \"\"<String> partnames for compiling, printing (includes comments)\"\"\n\t\tinstsize \"\"<Integer> for storage management\"\"\n\t\tmessagedict \"\"<MessageDict> for communication, compiling\"\"\n\t\tmonitors \"\"<Dictionary/nil> compiler checks here\"\"\n\t\tsuperclass \"\"<Class> for execution of inherited behavior\"\"\n\t\tenvironment \"\"<Vector of SymbolTables> for external references\"\"\n\t\tfieldtype \"\"<Integer> encodes field size, if bits\"\"';\n\tveryspecial: 1\"",
        "alto_source": "doIt [^[\"Class new title: 'Class';\n\tfields: 'title\t\"\"<String> for identification, printing\"\"\n\t\tmyinstvars \"\"<String> partnames for compiling, printing (includes comments)\"\"\n\t\tinstsize \"\"<Integer> for storage management\"\"\n\t\tmessagedict \"\"<MessageDict> for communication, compiling\"\"\n\t\tmonitors \"\"<Dictionary/nil> compiler checks here\"\"\n\t\tsuperclass \"\"<Class> for execution of inherited behavior\"\"\n\t\tenvironment \"\"<Vector of SymbolTables> for external references\"\"\n\t\tfieldtype \"\"<Integer> encodes field size, if bits\"\"';\n\tveryspecial: 1\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"order of messages, just to make things simpler:\n\ttitle insystem subclassof fields/abstract (required)\n\tsharing bytesize veryspecial (any order)\"",
        "alto_source": "doIt [^[\"order of messages, just to make things simpler:\n\ttitle insystem subclassof fields/abstract (required)\n\tsharing bytesize veryspecial (any order)\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'title: title\n\t[self title: title insystem: Smalltalk]'.\nClass understands: 'title: title insystem: system\n\t[system define: title unique as: self.\n\tsuperclass \u2190 Object]'.\nClass understands: 'subclassof: superclass'.\nClass understands: 'abstract\n\t[self fields: nullString]'.\nClass understands: 'fields: myinstvars\t\t\"list of instance variables\"\n\t[fieldtype \u2190 16.\n\tinstsize \u2190 self instvars length.\n\tinstsize>16\u21d2\n\t\t[user notify: ''too many instance variables'']\n\tmessagedict \u2190 MessageDict default.\n\tenvironment \u2190 Vector new: 1. environment\u20221 \u2190 Smalltalk]'.",
        "alto_source": "doIt [^[Class understands: 'title: title\n\t[self title: title insystem: Smalltalk]'.\nClass understands: 'title: title insystem: system\n\t[system define: title unique as: self.\n\tsuperclass _ Object]'.\nClass understands: 'subclassof: superclass'.\nClass understands: 'abstract\n\t[self fields: nullString]'.\nClass understands: 'fields: myinstvars\t\t\"list of instance variables\"\n\t[fieldtype _ 16.\n\tinstsize _ self instvars length.\n\tinstsize>16?\n\t\t[user notify: ''too many instance variables'']\n\tmessagedict _ MessageDict default.\n\tenvironment _ Vector new: 1. environment!1 _ Smalltalk]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'title: title\\012\\011[self title: title insystem: Smalltalk]'",
            "#.",
            "#Class",
            "#understands:",
            "'title: title insystem: system\\012\\011[system define: title unique as: self.\\012\\011superclass _ Object]'",
            "#.",
            "#Class",
            "#understands:",
            "'subclassof: superclass'",
            "#.",
            "#Class",
            "#understands:",
            "'abstract\\012\\011[self fields: nullString]'",
            "#.",
            "#Class",
            "#understands:",
            "'fields: myinstvars\\011\\011\"list of instance variables\"\\012\\011[fieldtype _ 16.\\012\\011instsize _ self instvars length.\\012\\011instsize>16?\\012\\011\\011[user notify: 'too many instance variables']\\012\\011messagedict _ MessageDict default.\\012\\011environment _ Vector new: 1. environment!1 _ Smalltalk]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x26\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'instvars\n\t[superclass\u2261nil \u21d2 [\u21d1myinstvars asVector]\n\t\u21d1superclass instvars concat: myinstvars asVector]'.",
        "alto_source": "doIt [^[Class understands: 'instvars\n\t[superclass\u0006nil ? [^myinstvars asVector]\n\t^superclass instvars concat: myinstvars asVector]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'instvars\\012\\011[superclass\\006nil ? [^myinstvars asVector]\\012\\011^superclass instvars concat: myinstvars asVector]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"Class understands: 'understands: code\t\t\"\"install method\"\"\n\t[Compiler new compile: code in: self]'.\"",
        "alto_source": "doIt [^[\"Class understands: 'understands: code\t\t\"\"install method\"\"\n\t[Compiler new compile: code in: self]'.\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'canunderstand: selector\n\t[\u21d1messagedict has: selector]'.\nClass understands: 'derstands: selector\n\t[messagedict \u2190 messagedict delete: selector]'.\nClass understands: 'install: name method: method literals: literals\n\t\tcode: code backpointers: backpointers\n\t[ \"[messagedict has: name\u21d2 [CodeKeeper next\u2190 messagedict literals: name]].\"\n\tmessagedict \u2190 messagedict insert: name method: method\n\t\tliterals: literals code: code backpointers: backpointers]'.\nClass understands: 'code: selector\n\t[\u21d1messagedict code: selector]'.",
        "alto_source": "doIt [^[Class understands: 'canunderstand: selector\n\t[^messagedict has: selector]'.\nClass understands: 'derstands: selector\n\t[messagedict _ messagedict delete: selector]'.\nClass understands: 'install: name method: method literals: literals\n\t\tcode: code backpointers: backpointers\n\t[ \"[messagedict has: name? [CodeKeeper next_ messagedict literals: name]].\"\n\tmessagedict _ messagedict insert: name method: method\n\t\tliterals: literals code: code backpointers: backpointers]'.\nClass understands: 'code: selector\n\t[^messagedict code: selector]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'canunderstand: selector\\012\\011[^messagedict has: selector]'",
            "#.",
            "#Class",
            "#understands:",
            "'derstands: selector\\012\\011[messagedict _ messagedict delete: selector]'",
            "#.",
            "#Class",
            "#understands:",
            "'install: name method: method literals: literals\\012\\011\\011code: code backpointers: backpointers\\012\\011[ \"[messagedict has: name? [CodeKeeper next_ messagedict literals: name]].\"\\012\\011messagedict _ messagedict insert: name method: method\\012\\011\\011literals: literals code: code backpointers: backpointers]'",
            "#.",
            "#Class",
            "#understands:",
            "'code: selector\\012\\011[^messagedict code: selector]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'new [] primitive: 28'.\t\"creation of instances\"",
        "alto_source": "doIt [^[Class understands: 'new [] primitive: 28'.\t\"creation of instances\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'new [] primitive: 28'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'printon: strm\n\t[strm append: title]'.",
        "alto_source": "doIt [^[Class understands: 'printon: strm\n\t[strm append: title]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'printon: strm\\012\\011[strm append: title]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'allinstances [] primitive: 60\t\"enumeration\"\n\t\"If Ted cant do it, nobody can...\"'.",
        "alto_source": "doIt [^[Class understands: 'allinstances [] primitive: 60\t\"enumeration\"\n\t\"If Ted cant do it, nobody can...\"'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'allinstances [] primitive: 60\\011\"enumeration\"\\012\\011\"If Ted cant do it, nobody can...\"'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'bytesize: n\t\"non-pointer declaration\"\n\t[fieldtype \u2190 32+ [n=8\u21d2 [8] 16]]'.\t\"vanilla or chocolate only\"\nClass understands: 'veryspecial: n\t\t\"for ClassClasses\"\n\t[instsize \u2190 instsize+n]'.\t\t\"secret freelist fields\"\nClass understands: 'superclass [\u21d1superclass]'.\nClass understands: 'environment [\u21d1environment]'.",
        "alto_source": "doIt [^[Class understands: 'bytesize: n\t\"non-pointer declaration\"\n\t[fieldtype _ 32+ [n=8? [8] 16]]'.\t\"vanilla or chocolate only\"\nClass understands: 'veryspecial: n\t\t\"for ClassClasses\"\n\t[instsize _ instsize+n]'.\t\t\"secret freelist fields\"\nClass understands: 'superclass [^superclass]'.\nClass understands: 'environment [^environment]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'bytesize: n\\011\"non-pointer declaration\"\\012\\011[fieldtype _ 32+ [n=8? [8] 16]]'",
            "#.",
            "#Class",
            "#understands:",
            "'veryspecial: n\\011\\011\"for ClassClasses\"\\012\\011[instsize _ instsize+n]'",
            "#.",
            "#Class",
            "#understands:",
            "'superclass [^superclass]'",
            "#.",
            "#Class",
            "#understands:",
            "'environment [^environment]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'print: inst on: strm | ivars i\n\t[ivars \u2190 self instVars.\t\t\"hh, was: myinstvars asVector\"\n\tstrm append: ''(''; append: title; append: '' new ''.\n\tfor% i to: instsize do%\n\t\t[strm append: ivars\u2022i; append: '': '';\n\t\t\tprint: (inst instfield: i); space]\n\tstrm append: '')'']'.",
        "alto_source": "doIt [^[Class understands: 'print: inst on: strm | ivars i\n\t[ivars _ self instVars.\t\t\"hh, was: myinstvars asVector\"\n\tstrm append: ''(''; append: title; append: '' new ''.\n\tfor% i to: instsize do%\n\t\t[strm append: ivars!i; append: '': '';\n\t\t\tprint: (inst instfield: i); space]\n\tstrm append: '')'']'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'print: inst on: strm | ivars i\\012\\011[ivars _ self instVars.\\011\\011\"hh, was: myinstvars asVector\"\\012\\011strm append: '('; append: title; append: ' new '.\\012\\011for% i to: instsize do%\\012\\011\\011[strm append: ivars!i; append: ': ';\\012\\011\\011\\011print: (inst instfield: i); space]\\012\\011strm append: ')']'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'init\t\t\"init and default get propagated to instances\"\n\t[\u21d1self new init]'.\nClass understands: 'default\n\t[\u21d1self new default]'.",
        "alto_source": "doIt [^[Class understands: 'init\t\t\"init and default get propagated to instances\"\n\t[^self new init]'.\nClass understands: 'default\n\t[^self new default]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'init\\011\\011\"init and default get propagated to instances\"\\012\\011[^self new init]'",
            "#.",
            "#Class",
            "#understands:",
            "'default\\012\\011[^self new default]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Class understands: 'copy: inst | t i\n\t[t \u2190 self new.\n\tfor% i to: instsize do%\n\t\t[t instfield: i \u2190 inst instfield: i]\n\t\u21d1t]'.\nClass understands: 'recopy: inst | t i\n\t[t \u2190 self new.\n\tfor% i to: instsize do%\n\t\t[t instfield: i \u2190 (inst instfield: i) recopy]\n\t\u21d1t]'.",
        "alto_source": "doIt [^[Class understands: 'copy: inst | t i\n\t[t _ self new.\n\tfor% i to: instsize do%\n\t\t[t instfield: i _ inst instfield: i]\n\t^t]'.\nClass understands: 'recopy: inst | t i\n\t[t _ self new.\n\tfor% i to: instsize do%\n\t\t[t instfield: i _ (inst instfield: i) recopy]\n\t^t]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Class",
            "#understands:",
            "'copy: inst | t i\\012\\011[t _ self new.\\012\\011for% i to: instsize do%\\012\\011\\011[t instfield: i _ inst instfield: i]\\012\\011^t]'",
            "#.",
            "#Class",
            "#understands:",
            "'recopy: inst | t i\\012\\011[t _ self new.\\012\\011for% i to: instsize do%\\012\\011\\011[t instfield: i _ (inst instfield: i) recopy]\\012\\011^t]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"\nClass understands: 'ed: selector | c s\n\t[c\u2190 self code: selector. user clearshow: c.\n\twhile% (s\u2190 user request: ''substitute: '') do%\n\t\t[c \u2190 c subst: s for: (user request: ''for: '').\n\t\tuser clearshow: c]\n\tself understands: c]'.\n\"",
        "alto_source": "doIt [^[\"\nClass understands: 'ed: selector | c s\n\t[c_ self code: selector. user clearshow: c.\n\twhile% (s_ user request: ''substitute: '') do%\n\t\t[c _ c subst: s for: (user request: ''for: '').\n\t\tuser clearshow: c]\n\tself understands: c]'.\n\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'VariableLengthClass, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'VariableLengthClass, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'VariableLengthClass, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'VariableLengthClass';\n\tsubclassof: Class;\n\tfields: '';\n\tveryspecial: 20\"",
        "alto_source": "doIt [^[\"Class new title: 'VariableLengthClass';\n\tsubclassof: Class;\n\tfields: '';\n\tveryspecial: 20\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "VariableLengthClass understands: 'new: length\n\t[length \u2265 020000 \u21d2[length print. user notify: '' is too large'']\n\tlength < 0 \u21d2[length print. user notify: '' is too small'']\n\t\u21d1self new: length asInteger] primitive: 29'.\nVariableLengthClass understands: 'new\n\t[user notify: ''use new: <Integer=length> here.'']'.",
        "alto_source": "doIt [^[VariableLengthClass understands: 'new: length\n\t[length \u0012 020000 ?[length print. user notify: '' is too large'']\n\tlength < 0 ?[length print. user notify: '' is too small'']\n\t^self new: length asInteger] primitive: 29'.\nVariableLengthClass understands: 'new\n\t[user notify: ''use new: <Integer=length> here.'']'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#VariableLengthClass",
            "#understands:",
            "'new: length\\012\\011[length \\022 020000 ?[length print. user notify: ' is too large']\\012\\011length < 0 ?[length print. user notify: ' is too small']\\012\\011^self new: length asInteger] primitive: 29'",
            "#.",
            "#VariableLengthClass",
            "#understands:",
            "'new\\012\\011[user notify: 'use new: <Integer=length> here.']'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "VariableLengthClass understands: 'copy: inst | t i\n\t[t \u2190 self new: inst length.\n\tfor% i to: inst length do%\n\t\t[t\u2022i \u2190 inst\u2022i]\n\t\u21d1t]'.\nVariableLengthClass understands: 'recopy: inst | t i\n\t[t \u2190 self new: inst length.\n\tfor% i to: inst length do%\n\t\t[t\u2022i \u2190 (inst\u2022i) recopy]\n\t\u21d1t]'.",
        "alto_source": "doIt [^[VariableLengthClass understands: 'copy: inst | t i\n\t[t _ self new: inst length.\n\tfor% i to: inst length do%\n\t\t[t!i _ inst!i]\n\t^t]'.\nVariableLengthClass understands: 'recopy: inst | t i\n\t[t _ self new: inst length.\n\tfor% i to: inst length do%\n\t\t[t!i _ (inst!i) recopy]\n\t^t]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#VariableLengthClass",
            "#understands:",
            "'copy: inst | t i\\012\\011[t _ self new: inst length.\\012\\011for% i to: inst length do%\\012\\011\\011[t!i _ inst!i]\\012\\011^t]'",
            "#.",
            "#VariableLengthClass",
            "#understands:",
            "'recopy: inst | t i\\012\\011[t _ self new: inst length.\\012\\011for% i to: inst length do%\\012\\011\\011[t!i _ (inst!i) recopy]\\012\\011^t]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Context, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Context, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Context, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Context';\n\tfields: 'sender \"\"<Context> from which this message was sent\"\"\n\t\treceiver \"\"<Object> to which this message was sent\"\"\n\t\tmclass \"\"<Class> in which a method was found\"\"\n\t\tmethod \"\"<String>, the encoded method\"\"\n\t\ttempframe \"\"<Vector> to hold temporaries and a stack\"\"\n\t\tpc \"\"<Integer> marks progress of execution in method\"\"\n\t\tstackptr \"\"<Integer> offset of stack top in tempframe\"\"'\"",
        "alto_source": "doIt [^[\"Class new title: 'Context';\n\tfields: 'sender \"\"<Context> from which this message was sent\"\"\n\t\treceiver \"\"<Object> to which this message was sent\"\"\n\t\tmclass \"\"<Class> in which a method was found\"\"\n\t\tmethod \"\"<String>, the encoded method\"\"\n\t\ttempframe \"\"<Vector> to hold temporaries and a stack\"\"\n\t\tpc \"\"<Integer> marks progress of execution in method\"\"\n\t\tstackptr \"\"<Integer> offset of stack top in tempframe\"\"'\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Context understands: 'eval [] primitive: 30'.",
        "alto_source": "doIt [^[Context understands: 'eval [] primitive: 30'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Context",
            "#understands:",
            "'eval [] primitive: 30'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Context understands: 'sender: sender receiver: receiver mclass: mclass\n\t\tmethod: method tempframe: tempframe pc: pc stackptr: stackptr'.\nContext understands: 'remoteCopy\n\t[\u21d1Context new sender: sender receiver: receiver mclass: mclass\n\t\tmethod: method tempframe: tempframe pc: pc+2 stackptr: stackptr]'.",
        "alto_source": "doIt [^[Context understands: 'sender: sender receiver: receiver mclass: mclass\n\t\tmethod: method tempframe: tempframe pc: pc stackptr: stackptr'.\nContext understands: 'remoteCopy\n\t[^Context new sender: sender receiver: receiver mclass: mclass\n\t\tmethod: method tempframe: tempframe pc: pc+2 stackptr: stackptr]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Context",
            "#understands:",
            "'sender: sender receiver: receiver mclass: mclass\\012\\011\\011method: method tempframe: tempframe pc: pc stackptr: stackptr'",
            "#.",
            "#Context",
            "#understands:",
            "'remoteCopy\\012\\011[^Context new sender: sender receiver: receiver mclass: mclass\\012\\011\\011method: method tempframe: tempframe pc: pc+2 stackptr: stackptr]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Context understands: 'sender [\u21d1sender]'.\nContext understands: 'sender\u2190 sender []'.",
        "alto_source": "doIt [^[Context understands: 'sender [^sender]'.\nContext understands: 'sender_ sender []'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Context",
            "#understands:",
            "'sender [^sender]'",
            "#.",
            "#Context",
            "#understands:",
            "'sender_ sender []'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Context understands: 'printon: strm\n\t[receiver class printon: strm. sender\u2261nil\u21d2 []\n\t\tstrm append: ''\u2022''; print: sender thisop]'.\nContext understands: 'trace | strm a\n\t[strm \u2190 Stream default. self printon: strm.\n\ta \u2190 sender. until% a\u2261nil do%\n\t\t[strm cr. a printon: strm. a \u2190 a sender]\n\t\u21d1strm contents]'.\nContext understands: 'thisop | a\n\t[a \u2190 method\u2022pc.\n\ta\u22650320\u21d2 [\u21d1self litof: a-0320]\n\ta\u22650260\u21d2 [\u21d1self specialops\u2022(1+a-0260)]\n\t\u21d1\u261esomething]'.\nContext understands: 'litof: a\n\t[\u21d1(method word: a+4) asObject]'.",
        "alto_source": "doIt [^[Context understands: 'printon: strm\n\t[receiver class printon: strm. sender\u0006nil? []\n\t\tstrm append: ''!''; print: sender thisop]'.\nContext understands: 'trace | strm a\n\t[strm _ Stream default. self printon: strm.\n\ta _ sender. until% a\u0006nil do%\n\t\t[strm cr. a printon: strm. a _ a sender]\n\t^strm contents]'.\nContext understands: 'thisop | a\n\t[a _ method!pc.\n\ta\u00120320? [^self litof: a-0320]\n\ta\u00120260? [^self specialops!(1+a-0260)]\n\t^#something]'.\nContext understands: 'litof: a\n\t[^(method word: a+4) asObject]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Context",
            "#understands:",
            "'printon: strm\\012\\011[receiver class printon: strm. sender\\006nil? []\\012\\011\\011strm append: '!'; print: sender thisop]'",
            "#.",
            "#Context",
            "#understands:",
            "'trace | strm a\\012\\011[strm _ Stream default. self printon: strm.\\012\\011a _ sender. until% a\\006nil do%\\012\\011\\011[strm cr. a printon: strm. a _ a sender]\\012\\011^strm contents]'",
            "#.",
            "#Context",
            "#understands:",
            "'thisop | a\\012\\011[a _ method!pc.\\012\\011a\\0220320? [^self litof: a-0320]\\012\\011a\\0220260? [^self specialops!(1+a-0260)]\\012\\011^#something]'",
            "#.",
            "#Context",
            "#understands:",
            "'litof: a\\012\\011[^(method word: a+4) asObject]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Context understands: 'specialops\n\t[\u21d1\u261e(+ - < > \u2264 \u2265 = \u2260\n\t\t* / \\ | min: max: land: lor:\n\t\t\u2022 x next x length \u2261 nil nil\n\t\tclass and: or: new new: to: oneToMeAsStream asStream)]'.",
        "alto_source": "doIt [^[Context understands: 'specialops\n\t[^#(+ - < > \u0001 \u0012 = \u000e\n\t\t* / \\ | min: max: land: lor:\n\t\t! x next x length \u0006 nil nil\n\t\tclass and: or: new new: to: oneToMeAsStream asStream)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Context",
            "#understands:",
            "'specialops\\012\\011[^#(+ - < > \\001 \\022 = \\016\\012\\011\\011* / \\ | min: max: land: lor:\\012\\011\\011! x next x length \\006 nil nil\\012\\011\\011class and: or: new new: to: oneToMeAsStream asStream)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"-- correct two unquotable symbols later:\nContext new specialops\u202218 \u2190 '\u2022\u2190' unique.\nContext new specialops\u202220 \u2190 'next\u2190' unique.\n\"",
        "alto_source": "doIt [^[\"-- correct two unquotable symbols later:\nContext new specialops!18 _ '!_' unique.\nContext new specialops!20 _ 'next_' unique.\n\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"Context understands: 'debug | t\n\t[user cr. self print.\n\twhile% [t \u2190 user request: ''\n*''] do% [user show: (self\u2019s t) asString]]'.\n\"",
        "alto_source": "doIt [^[\"Context understands: 'debug | t\n\t[user cr. self print.\n\twhile% [t _ user request: ''\n*''] do% [user show: (self\u2019s t) asString]]'.\n\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"NUMBERS\"",
        "alto_source": "doIt [^[\"NUMBERS\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Number, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Number, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Number, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Number';\n\tabstract\"\t\t\"Numbers in general\"",
        "alto_source": "doIt [^[\"Class new title: 'Number';\n\tabstract\"\t\t\"Numbers in general\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Number understands: 'min: arg\n\t[self>arg\u21d2[\u21d1arg]]'.\nNumber understands: 'max: arg\n\t[self<arg\u21d2[\u21d1arg]]'.",
        "alto_source": "doIt [^[Number understands: 'min: arg\n\t[self>arg?[^arg]]'.\nNumber understands: 'max: arg\n\t[self<arg?[^arg]]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Number",
            "#understands:",
            "'min: arg\\012\\011[self>arg?[^arg]]'",
            "#.",
            "#Number",
            "#understands:",
            "'max: arg\\012\\011[self<arg?[^arg]]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"\nNumber understands: '\u22a1 y\n\t[\u21d1Point new x: self y: y]'.\n\"",
        "alto_source": "doIt [^[\"\nNumber understands: '@ y\n\t[^Point new x: self y: y]'.\n\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Number understands: 'to: x\n\t[\u21d1Interval new from: self to: x by: 1]'.\nNumber understands: 'to: x by: y\n\t[\u21d1Interval new from: self to: x by: y]'.",
        "alto_source": "doIt [^[Number understands: 'to: x\n\t[^Interval new from: self to: x by: 1]'.\nNumber understands: 'to: x by: y\n\t[^Interval new from: self to: x by: y]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Number",
            "#understands:",
            "'to: x\\012\\011[^Interval new from: self to: x by: 1]'",
            "#.",
            "#Number",
            "#understands:",
            "'to: x by: y\\012\\011[^Interval new from: self to: x by: y]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Number understands: 'subscripts: a\n\t[\u21d1a\u2022self asInteger]'.\nNumber understands: 'subscripts: a \u2190 val\n\t[\u21d1a\u2022self asInteger \u2190 val]'.",
        "alto_source": "doIt [^[Number understands: 'subscripts: a\n\t[^a!self asInteger]'.\nNumber understands: 'subscripts: a _ val\n\t[^a!self asInteger _ val]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Number",
            "#understands:",
            "'subscripts: a\\012\\011[^a!self asInteger]'",
            "#.",
            "#Number",
            "#understands:",
            "'subscripts: a _ val\\012\\011[^a!self asInteger _ val]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Integer, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Integer, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Integer, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Integer';\t\t\t\"\"16-bit integers\"\"\n\tsubclassof: Number;\n\tfields: '';\n\tbytesize: 16;\n\tveryspecial: 1\"\t\t\"instance state not currently accessible\"",
        "alto_source": "doIt [^[\"Class new title: 'Integer';\t\t\t\"\"16-bit integers\"\"\n\tsubclassof: Number;\n\tfields: '';\n\tbytesize: 16;\n\tveryspecial: 1\"\t\t\"instance state not currently accessible\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Integer understands: '+ arg\n\t[\u21d1self + arg asInteger] primitive: 6'.\nInteger understands: '- arg\n\t[\u21d1self - arg asInteger] primitive: 7'.\nInteger understands: '* arg\n\t[\u21d1self * arg asInteger] primitive: 21'.\nInteger understands: '/ arg\n\t[\u21d1self / arg asInteger] primitive: 22'.",
        "alto_source": "doIt [^[Integer understands: '+ arg\n\t[^self + arg asInteger] primitive: 6'.\nInteger understands: '- arg\n\t[^self - arg asInteger] primitive: 7'.\nInteger understands: '* arg\n\t[^self * arg asInteger] primitive: 21'.\nInteger understands: '/ arg\n\t[^self / arg asInteger] primitive: 22'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'+ arg\\012\\011[^self + arg asInteger] primitive: 6'",
            "#.",
            "#Integer",
            "#understands:",
            "'- arg\\012\\011[^self - arg asInteger] primitive: 7'",
            "#.",
            "#Integer",
            "#understands:",
            "'* arg\\012\\011[^self * arg asInteger] primitive: 21'",
            "#.",
            "#Integer",
            "#understands:",
            "'/ arg\\012\\011[^self / arg asInteger] primitive: 22'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: '< arg\n\t[\u21d1self < arg asInteger] primitive: 8'.\nInteger understands: '= arg\n\t[\u21d1self = arg asInteger] primitive: 9'.\nInteger understands: '> arg\n\t[\u21d1self > arg asInteger] primitive: 10'.\nInteger understands: '\u2264 arg\n\t[\u21d1self \u2264 arg asInteger] primitive: 11'.\nInteger understands: '\u2260 arg\n\t[\u21d1self \u2260 arg asInteger] primitive: 12'.\nInteger understands: '\u2265 arg\n\t[\u21d1self \u2265 arg asInteger] primitive: 13'.",
        "alto_source": "doIt [^[Integer understands: '< arg\n\t[^self < arg asInteger] primitive: 8'.\nInteger understands: '= arg\n\t[^self = arg asInteger] primitive: 9'.\nInteger understands: '> arg\n\t[^self > arg asInteger] primitive: 10'.\nInteger understands: '\u0001 arg\n\t[^self \u0001 arg asInteger] primitive: 11'.\nInteger understands: '\u000e arg\n\t[^self \u000e arg asInteger] primitive: 12'.\nInteger understands: '\u0012 arg\n\t[^self \u0012 arg asInteger] primitive: 13'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'< arg\\012\\011[^self < arg asInteger] primitive: 8'",
            "#.",
            "#Integer",
            "#understands:",
            "'= arg\\012\\011[^self = arg asInteger] primitive: 9'",
            "#.",
            "#Integer",
            "#understands:",
            "'> arg\\012\\011[^self > arg asInteger] primitive: 10'",
            "#.",
            "#Integer",
            "#understands:",
            "'\\001 arg\\012\\011[^self \\001 arg asInteger] primitive: 11'",
            "#.",
            "#Integer",
            "#understands:",
            "'\\016 arg\\012\\011[^self \\016 arg asInteger] primitive: 12'",
            "#.",
            "#Integer",
            "#understands:",
            "'\\022 arg\\012\\011[^self \\022 arg asInteger] primitive: 13'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x26\\x40\\xd2\\x82\\x27\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: 'lshift: arg\n\t[\u21d1self lshift: arg asInteger] primitive: 25'.\nInteger understands: 'land: arg\n\t[\u21d1self land: arg asInteger] primitive: 23'.\nInteger understands: 'lor: arg\n\t[\u21d1self lor: arg asInteger] primitive: 24'.\nInteger understands: 'xor: arg\n\t[\u21d1self xor: arg asInteger] primitive: 35'.",
        "alto_source": "doIt [^[Integer understands: 'lshift: arg\n\t[^self lshift: arg asInteger] primitive: 25'.\nInteger understands: 'land: arg\n\t[^self land: arg asInteger] primitive: 23'.\nInteger understands: 'lor: arg\n\t[^self lor: arg asInteger] primitive: 24'.\nInteger understands: 'xor: arg\n\t[^self xor: arg asInteger] primitive: 35'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'lshift: arg\\012\\011[^self lshift: arg asInteger] primitive: 25'",
            "#.",
            "#Integer",
            "#understands:",
            "'land: arg\\012\\011[^self land: arg asInteger] primitive: 23'",
            "#.",
            "#Integer",
            "#understands:",
            "'lor: arg\\012\\011[^self lor: arg asInteger] primitive: 24'",
            "#.",
            "#Integer",
            "#understands:",
            "'xor: arg\\012\\011[^self xor: arg asInteger] primitive: 35'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: 'field: fld\n\t[\u21d1self field: fld asInteger] primitive: 36'.\nInteger understands: 'field: fld \u2190 val\n\t[\u21d1self field: fld asInteger \u2190 val asInteger] primitive: 37'.",
        "alto_source": "doIt [^[Integer understands: 'field: fld\n\t[^self field: fld asInteger] primitive: 36'.\nInteger understands: 'field: fld _ val\n\t[^self field: fld asInteger _ val asInteger] primitive: 37'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'field: fld\\012\\011[^self field: fld asInteger] primitive: 36'",
            "#.",
            "#Integer",
            "#understands:",
            "'field: fld _ val\\012\\011[^self field: fld asInteger _ val asInteger] primitive: 37'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: '\\ arg\t\"mod\"\n\t[\u21d1self \\ arg asInteger] primitive: 26'.\nInteger understands: '| arg\t\"truncate\"\n\t[\u21d1self/arg*arg]'.",
        "alto_source": "doIt [^[Integer understands: '\\ arg\t\"mod\"\n\t[^self \\ arg asInteger] primitive: 26'.\nInteger understands: '| arg\t\"truncate\"\n\t[^self/arg*arg]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'\\ arg\\011\"mod\"\\012\\011[^self \\ arg asInteger] primitive: 26'",
            "#.",
            "#Integer",
            "#understands:",
            "'| arg\\011\"truncate\"\\012\\011[^self/arg*arg]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: 'printon: strm\n\t[self<0\u21d2[strm append: ''\u203e''. (0-self) absprinton: strm]\n\tself absprinton: strm]'.\nInteger understands: 'absprinton: strm | rem\n\t[rem \u2190 self\\10.\n\t[self>9\u21d2 [self/10 absprinton: strm]].\n\tstrm next \u2190 rem+060]'.",
        "alto_source": "doIt [^[Integer understands: 'printon: strm\n\t[self<0?[strm append: ''\u0015''. (0-self) absprinton: strm]\n\tself absprinton: strm]'.\nInteger understands: 'absprinton: strm | rem\n\t[rem _ self\\10.\n\t[self>9? [self/10 absprinton: strm]].\n\tstrm next _ rem+060]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'printon: strm\\012\\011[self<0?[strm append: '\\025'. (0-self) absprinton: strm]\\012\\011self absprinton: strm]'",
            "#.",
            "#Integer",
            "#understands:",
            "'absprinton: strm | rem\\012\\011[rem _ self\\10.\\012\\011[self>9? [self/10 absprinton: strm]].\\012\\011strm next _ rem+060]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: 'asInteger [\u21d1self]'.\nInteger understands: 'asFloat [] primitive: 34'.",
        "alto_source": "doIt [^[Integer understands: 'asInteger [^self]'.\nInteger understands: 'asFloat [] primitive: 34'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'asInteger [^self]'",
            "#.",
            "#Integer",
            "#understands:",
            "'asFloat [] primitive: 34'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: 'oneToMeAsStream\t\t\"used by for-loops\"\n\t[\u21d1Stream new of: (Interval new from: 1 to: self by: 1)]'.",
        "alto_source": "doIt [^[Integer understands: 'oneToMeAsStream\t\t\"used by for-loops\"\n\t[^Stream new of: (Interval new from: 1 to: self by: 1)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'oneToMeAsStream\\011\\011\"used by for-loops\"\\012\\011[^Stream new of: (Interval new from: 1 to: self by: 1)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: 'copy [\u21d1self]'.\nInteger understands: 'recopy [\u21d1self]'.",
        "alto_source": "doIt [^[Integer understands: 'copy [^self]'.\nInteger understands: 'recopy [^self]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'copy [^self]'",
            "#.",
            "#Integer",
            "#understands:",
            "'recopy [^self]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: 'isletter\n\t[self \u2265 0141\u21d2\t\" a \"\n\t\t[\u21d1self \u2264 0172]\t\" z \"\n\tself \u2265 0101\u21d2\t\" A \"\n\t\t[\u21d1self \u2264 0132]\t\" Z \"\n\t\u21d1false]'.\nInteger understands: 'isdigit \n\t[self \u2265 060\u21d2\t\" 0 \"\n\t\t[\u21d1self \u2264 071]\t\" 9 \"\n\t\u21d1false]'.",
        "alto_source": "doIt [^[Integer understands: 'isletter\n\t[self \u0012 0141?\t\" a \"\n\t\t[^self \u0001 0172]\t\" z \"\n\tself \u0012 0101?\t\" A \"\n\t\t[^self \u0001 0132]\t\" Z \"\n\t^false]'.\nInteger understands: 'isdigit \n\t[self \u0012 060?\t\" 0 \"\n\t\t[^self \u0001 071]\t\" 9 \"\n\t^false]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'isletter\\012\\011[self \\022 0141?\\011\" a \"\\012\\011\\011[^self \\001 0172]\\011\" z \"\\012\\011self \\022 0101?\\011\" A \"\\012\\011\\011[^self \\001 0132]\\011\" Z \"\\012\\011^false]'",
            "#.",
            "#Integer",
            "#understands:",
            "'isdigit \\012\\011[self \\022 060?\\011\" 0 \"\\012\\011\\011[^self \\001 071]\\011\" 9 \"\\012\\011^false]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"Following two must be failures from Array subscripting: \"\nInteger understands: 'subscripts: a\n\t[user notify: ''Subscript out of bounds: '' + self asString]'.\nInteger understands: 'subscripts: a \u2190 val\n\t[user notify: ''Subscript out of bounds: '' + self asString]'.",
        "alto_source": "doIt [^[\"Following two must be failures from Array subscripting: \"\nInteger understands: 'subscripts: a\n\t[user notify: ''Subscript out of bounds: '' + self asString]'.\nInteger understands: 'subscripts: a _ val\n\t[user notify: ''Subscript out of bounds: '' + self asString]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'subscripts: a\\012\\011[user notify: 'Subscript out of bounds: ' + self asString]'",
            "#.",
            "#Integer",
            "#understands:",
            "'subscripts: a _ val\\012\\011[user notify: 'Subscript out of bounds: ' + self asString]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Integer understands: 'purge [] primitive: 44'.\t\"write this oop to disk\"\n\t\"Warning: The Surgeon General has determined that the following message\n\tmay be hazardous to the health of your system.\"\nInteger understands: 'asObject [] primitive: 81'.\t\"makes a pointer\"",
        "alto_source": "doIt [^[Integer understands: 'purge [] primitive: 44'.\t\"write this oop to disk\"\n\t\"Warning: The Surgeon General has determined that the following message\n\tmay be hazardous to the health of your system.\"\nInteger understands: 'asObject [] primitive: 81'.\t\"makes a pointer\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Integer",
            "#understands:",
            "'purge [] primitive: 44'",
            "#.",
            "#Integer",
            "#understands:",
            "'asObject [] primitive: 81'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Float, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Float, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Float, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Float';\t\t\"\"Floating-Point\"\"\n\tsubclassof: Number;\n\tfields: '';\n\tbytesize: 16;\n\tveryspecial: 3\"\t\t\"instance state not currently accessible\"",
        "alto_source": "doIt [^[\"Class new title: 'Float';\t\t\"\"Floating-Point\"\"\n\tsubclassof: Number;\n\tfields: '';\n\tbytesize: 16;\n\tveryspecial: 3\"\t\t\"instance state not currently accessible\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Float understands: '+ arg\n\t[\u21d1self+arg asFloat] primitive: 67'.\nFloat understands: '- arg\n\t[\u21d1self-arg asFloat] primitive: 68'.\nFloat understands: '* arg\n\t[\u21d1self*arg asFloat] primitive: 69'.\nFloat understands: '/ arg\n\t[\u21d1self/arg asFloat] primitive: 70'.",
        "alto_source": "doIt [^[Float understands: '+ arg\n\t[^self+arg asFloat] primitive: 67'.\nFloat understands: '- arg\n\t[^self-arg asFloat] primitive: 68'.\nFloat understands: '* arg\n\t[^self*arg asFloat] primitive: 69'.\nFloat understands: '/ arg\n\t[^self/arg asFloat] primitive: 70'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Float",
            "#understands:",
            "'+ arg\\012\\011[^self+arg asFloat] primitive: 67'",
            "#.",
            "#Float",
            "#understands:",
            "'- arg\\012\\011[^self-arg asFloat] primitive: 68'",
            "#.",
            "#Float",
            "#understands:",
            "'* arg\\012\\011[^self*arg asFloat] primitive: 69'",
            "#.",
            "#Float",
            "#understands:",
            "'/ arg\\012\\011[^self/arg asFloat] primitive: 70'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Float understands: '< arg\n\t[\u21d1self<arg asFloat] primitive: 71'.\nFloat understands: '= arg\n\t[\u21d1self=arg asFloat] primitive: 72'.\nFloat understands: '\u2264 arg\n\t[\u21d1self\u2264arg asFloat] primitive: 73'.\nFloat understands: '> arg\n\t[\u21d1self>arg asFloat] primitive: 74'.\nFloat understands: '\u2265 arg\n\t[\u21d1self\u2265arg asFloat] primitive: 75'.\nFloat understands: '\u2260 arg\n\t[\u21d1self\u2260arg asFloat] primitive: 76'.",
        "alto_source": "doIt [^[Float understands: '< arg\n\t[^self<arg asFloat] primitive: 71'.\nFloat understands: '= arg\n\t[^self=arg asFloat] primitive: 72'.\nFloat understands: '\u0001 arg\n\t[^self\u0001arg asFloat] primitive: 73'.\nFloat understands: '> arg\n\t[^self>arg asFloat] primitive: 74'.\nFloat understands: '\u0012 arg\n\t[^self\u0012arg asFloat] primitive: 75'.\nFloat understands: '\u000e arg\n\t[^self\u000earg asFloat] primitive: 76'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Float",
            "#understands:",
            "'< arg\\012\\011[^self<arg asFloat] primitive: 71'",
            "#.",
            "#Float",
            "#understands:",
            "'= arg\\012\\011[^self=arg asFloat] primitive: 72'",
            "#.",
            "#Float",
            "#understands:",
            "'\\001 arg\\012\\011[^self\\001arg asFloat] primitive: 73'",
            "#.",
            "#Float",
            "#understands:",
            "'> arg\\012\\011[^self>arg asFloat] primitive: 74'",
            "#.",
            "#Float",
            "#understands:",
            "'\\022 arg\\012\\011[^self\\022arg asFloat] primitive: 75'",
            "#.",
            "#Float",
            "#understands:",
            "'\\016 arg\\012\\011[^self\\016arg asFloat] primitive: 76'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x26\\x40\\xd2\\x82\\x27\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Float understands: 'fpart [] primitive: 77'.\nFloat understands: 'ipart\n\t[\u21d1self-self fpart]\n\t\"NOTE this isnt an Integer\"'.\nFloat understands: 'asInteger [] primitive: 78\n\t\"this IS an Integer\"'.",
        "alto_source": "doIt [^[Float understands: 'fpart [] primitive: 77'.\nFloat understands: 'ipart\n\t[^self-self fpart]\n\t\"NOTE this isnt an Integer\"'.\nFloat understands: 'asInteger [] primitive: 78\n\t\"this IS an Integer\"'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Float",
            "#understands:",
            "'fpart [] primitive: 77'",
            "#.",
            "#Float",
            "#understands:",
            "'ipart\\012\\011[^self-self fpart]\\012\\011\"NOTE this isnt an Integer\"'",
            "#.",
            "#Float",
            "#understands:",
            "'asInteger [] primitive: 78\\012\\011\"this IS an Integer\"'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Float understands: 'sqrt [] primitive: 79'.\nFloat understands: 'ipow: x\t\t\"fixed powers in log n steps\"\n\t[x=0\u21d2 [\u21d11.0]\n\tx=1\u21d2 [\u21d1self]\n\tx>1\u21d2 [\u21d1((self*self) ipow: x/2)*(self ipow: x\\2)]\n\t\u21d11.0/(self ipow: 0-x)]'.",
        "alto_source": "doIt [^[Float understands: 'sqrt [] primitive: 79'.\nFloat understands: 'ipow: x\t\t\"fixed powers in log n steps\"\n\t[x=0? [^1.0]\n\tx=1? [^self]\n\tx>1? [^((self*self) ipow: x/2)*(self ipow: x\\2)]\n\t^1.0/(self ipow: 0-x)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Float",
            "#understands:",
            "'sqrt [] primitive: 79'",
            "#.",
            "#Float",
            "#understands:",
            "'ipow: x\\011\\011\"fixed powers in log n steps\"\\012\\011[x=0? [^1.0]\\012\\011x=1? [^self]\\012\\011x>1? [^((self*self) ipow: x/2)*(self ipow: x\\2)]\\012\\011^1.0/(self ipow: 0-x)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Float understands: 'epart: base | x\t\"gives floor log.base self\"\n\t[self<base\u21d2 [\u21d10]\t\t\"self assumed positive\"\n\tself<(base*base)\u21d2 [\u21d11]\n\tx \u2190 2*(self epart: base*base).\t\"binary recursion like ipow\"\n\t\u21d1x + ((self/(base ipow: x)) epart: base)]'.\nFloat understands: 'printon: strm\n\t[self<0.0\u21d2 [strm append: ''\u203e''. (0.0-self) absprinton: strm]\n\tself absprinton: strm]'.\nFloat understands: 'absprinton: strm | x y q i fuzz\n\t[fuzz \u2190 5.0e\u203e9.\t\t\t\"fuzz tracks significance\"\n\ty \u2190 [self<1.0\u21d2 [0-(10.0/self epart: 10.0)] self epart: 10.0].\n\tx \u2190 self/(10.0 ipow: y)+fuzz.\t\t\t\"normalize x\"\n\t[x\u226510.0\u21d2 [y \u2190 y+1. x \u2190 x/10.0]].\t\"y = exponent\"\n\t[y<6 and: y>\u203e4\u21d2\n\t\t[q \u2190 0.\t\t\t\"decimal notation\"\n\t\ty<0\u21d2 [strm append: ''0.0000''\u2022(1 to: 1-y)]\n\t\tfuzz \u2190 fuzz * (10.0 ipow: y)].\n\tq \u2190 y. y \u2190 0].\t\t\"scientific notation\"\n\tfor% i to: 9 do%\n\t\t[strm next \u2190 060+x ipart.\n\t\tx \u2190 10.0 * x fpart.\n\t\t0>(y \u2190 y-1)\u21d2\n\t\t\t[x<(fuzz \u2190 fuzz*10.0)\u21d2[\"done - fix\"]\n\t\t\ty=\u203e1\u21d2 [strm append: ''.'']]]\n\t[y=\u203e1\u21d2[strm append: ''.0'']].\n\tq\u22600\u21d2[strm append: ''e''; print: q]]'.",
        "alto_source": "doIt [^[Float understands: 'epart: base | x\t\"gives floor log.base self\"\n\t[self<base? [^0]\t\t\"self assumed positive\"\n\tself<(base*base)? [^1]\n\tx _ 2*(self epart: base*base).\t\"binary recursion like ipow\"\n\t^x + ((self/(base ipow: x)) epart: base)]'.\nFloat understands: 'printon: strm\n\t[self<0.0? [strm append: ''\u0015''. (0.0-self) absprinton: strm]\n\tself absprinton: strm]'.\nFloat understands: 'absprinton: strm | x y q i fuzz\n\t[fuzz _ 5.0e\u00159.\t\t\t\"fuzz tracks significance\"\n\ty _ [self<1.0? [0-(10.0/self epart: 10.0)] self epart: 10.0].\n\tx _ self/(10.0 ipow: y)+fuzz.\t\t\t\"normalize x\"\n\t[x\u001210.0? [y _ y+1. x _ x/10.0]].\t\"y = exponent\"\n\t[y<6 and: y>\u00154?\n\t\t[q _ 0.\t\t\t\"decimal notation\"\n\t\ty<0? [strm append: ''0.0000''!(1 to: 1-y)]\n\t\tfuzz _ fuzz * (10.0 ipow: y)].\n\tq _ y. y _ 0].\t\t\"scientific notation\"\n\tfor% i to: 9 do%\n\t\t[strm next _ 060+x ipart.\n\t\tx _ 10.0 * x fpart.\n\t\t0>(y _ y-1)?\n\t\t\t[x<(fuzz _ fuzz*10.0)?[\"done - fix\"]\n\t\t\ty=\u00151? [strm append: ''.'']]]\n\t[y=\u00151?[strm append: ''.0'']].\n\tq\u000e0?[strm append: ''e''; print: q]]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Float",
            "#understands:",
            "'epart: base | x\\011\"gives floor log.base self\"\\012\\011[self<base? [^0]\\011\\011\"self assumed positive\"\\012\\011self<(base*base)? [^1]\\012\\011x _ 2*(self epart: base*base).\\011\"binary recursion like ipow\"\\012\\011^x + ((self/(base ipow: x)) epart: base)]'",
            "#.",
            "#Float",
            "#understands:",
            "'printon: strm\\012\\011[self<0.0? [strm append: '\\025'. (0.0-self) absprinton: strm]\\012\\011self absprinton: strm]'",
            "#.",
            "#Float",
            "#understands:",
            "'absprinton: strm | x y q i fuzz\\012\\011[fuzz _ 5.0e\\0259.\\011\\011\\011\"fuzz tracks significance\"\\012\\011y _ [self<1.0? [0-(10.0/self epart: 10.0)] self epart: 10.0].\\012\\011x _ self/(10.0 ipow: y)+fuzz.\\011\\011\\011\"normalize x\"\\012\\011[x\\02210.0? [y _ y+1. x _ x/10.0]].\\011\"y = exponent\"\\012\\011[y<6 and: y>\\0254?\\012\\011\\011[q _ 0.\\011\\011\\011\"decimal notation\"\\012\\011\\011y<0? [strm append: '0.0000'!(1 to: 1-y)]\\012\\011\\011fuzz _ fuzz * (10.0 ipow: y)].\\012\\011q _ y. y _ 0].\\011\\011\"scientific notation\"\\012\\011for% i to: 9 do%\\012\\011\\011[strm next _ 060+x ipart.\\012\\011\\011x _ 10.0 * x fpart.\\012\\011\\0110>(y _ y-1)?\\012\\011\\011\\011[x<(fuzz _ fuzz*10.0)?[\"done - fix\"]\\012\\011\\011\\011y=\\0251? [strm append: '.']]]\\012\\011[y=\\0251?[strm append: '.0']].\\012\\011q\\0160?[strm append: 'e'; print: q]]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Float understands: 'asFloat'.",
        "alto_source": "doIt [^[Float understands: 'asFloat'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Float",
            "#understands:",
            "'asFloat'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Float understands: 'copy [\u21d1self]'.\nFloat understands: 'recopy [\u21d1self]'.",
        "alto_source": "doIt [^[Float understands: 'copy [^self]'.\nFloat understands: 'recopy [^self]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Float",
            "#understands:",
            "'copy [^self]'",
            "#.",
            "#Float",
            "#understands:",
            "'recopy [^self]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"ARRAYS\"",
        "alto_source": "doIt [^[\"ARRAYS\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Array, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Array, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Array, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Array';\n\tabstract\"\t\t\t\"arrays in general\"",
        "alto_source": "doIt [^[\"Class new title: 'Array';\n\tabstract\"\t\t\t\"arrays in general\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'length [] primitive: 16'.\nArray understands: '\u2022 x\n\t[\u21d1x subscripts: self] primitive: 38'.\nArray understands: '\u2022 x \u2190 val\n\t[\u21d1x subscripts: self \u2190 val] primitive: 39'.\n\"Note that subscripting by an integer is primitive.  A subscript of another class will be called with the message subscripts: array, in the hopes that it knows how to behave as a subscript.\"",
        "alto_source": "doIt [^[Array understands: 'length [] primitive: 16'.\nArray understands: '! x\n\t[^x subscripts: self] primitive: 38'.\nArray understands: '! x _ val\n\t[^x subscripts: self _ val] primitive: 39'.\n\"Note that subscripting by an integer is primitive.  A subscript of another class will be called with the message subscripts: array, in the hopes that it knows how to behave as a subscript.\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'length [] primitive: 16'",
            "#.",
            "#Array",
            "#understands:",
            "'! x\\012\\011[^x subscripts: self] primitive: 38'",
            "#.",
            "#Array",
            "#understands:",
            "'! x _ val\\012\\011[^x subscripts: self _ val] primitive: 39'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'subscripts: x\t\t\t\"subarrays\"\n\t[\u21d1Substring new data: x map: self]'.\nArray understands: 'subscripts: x \u2190 val\t\t\"subrange replacement\"\n\t[self length\u2260val length\u21d2\n\t\t[user notify: ''lengths not commensurate'']\n\tval copyto: (Substring new data: x map: self).\n\t\u21d1val]'.",
        "alto_source": "doIt [^[Array understands: 'subscripts: x\t\t\t\"subarrays\"\n\t[^Substring new data: x map: self]'.\nArray understands: 'subscripts: x _ val\t\t\"subrange replacement\"\n\t[self length\u000eval length?\n\t\t[user notify: ''lengths not commensurate'']\n\tval copyto: (Substring new data: x map: self).\n\t^val]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'subscripts: x\\011\\011\\011\"subarrays\"\\012\\011[^Substring new data: x map: self]'",
            "#.",
            "#Array",
            "#understands:",
            "'subscripts: x _ val\\011\\011\"subrange replacement\"\\012\\011[self length\\016val length?\\012\\011\\011[user notify: 'lengths not commensurate']\\012\\011val copyto: (Substring new data: x map: self).\\012\\011^val]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'all \u2190 val | i\n\t[for% i to: self length do%\n\t\t[self\u2022i \u2190 val]]'.",
        "alto_source": "doIt [^[Array understands: 'all _ val | i\n\t[for% i to: self length do%\n\t\t[self!i _ val]]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'all _ val | i\\012\\011[for% i to: self length do%\\012\\011\\011[self!i _ val]]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: '= arg | x\n\t[self length \u2260 arg length\u21d2 [\u21d1false]\n\tfor% x to: self length do% \n\t\t[(self\u2022x) = (arg\u2022x)\u21d2 [] \u21d1false]\n\t\u21d1true]'.",
        "alto_source": "doIt [^[Array understands: '= arg | x\n\t[self length \u000e arg length? [^false]\n\tfor% x to: self length do% \n\t\t[(self!x) = (arg!x)? [] ^false]\n\t^true]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'= arg | x\\012\\011[self length \\016 arg length? [^false]\\012\\011for% x to: self length do% \\012\\011\\011[(self!x) = (arg!x)? [] ^false]\\012\\011^true]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'find: x | i\n\t[for% i to: self length do%\n\t\t[self\u2022i=x\u21d2 [\u21d1i]].\n\t\u21d10]'.\nArray understands: 'findnon: x | i\n\t[for% i to: self length do%\n\t\t[self\u2022i\u2260x\u21d2 [\u21d1i]].\n\t\u21d10]'.\nArray understands: 'has: x\n\t[\u21d10\u2260(self find: x)]'.",
        "alto_source": "doIt [^[Array understands: 'find: x | i\n\t[for% i to: self length do%\n\t\t[self!i=x? [^i]].\n\t^0]'.\nArray understands: 'findnon: x | i\n\t[for% i to: self length do%\n\t\t[self!i\u000ex? [^i]].\n\t^0]'.\nArray understands: 'has: x\n\t[^0\u000e(self find: x)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'find: x | i\\012\\011[for% i to: self length do%\\012\\011\\011[self!i=x? [^i]].\\012\\011^0]'",
            "#.",
            "#Array",
            "#understands:",
            "'findnon: x | i\\012\\011[for% i to: self length do%\\012\\011\\011[self!i\\016x? [^i]].\\012\\011^0]'",
            "#.",
            "#Array",
            "#understands:",
            "'has: x\\012\\011[^0\\016(self find: x)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'reverse\t\n\t[\u21d1Substring new data: self map: (self length to: 1 by: \u203e1)]'.\nArray understands: 'concat: arg | x\n\t[x \u2190 self species new: self length + arg length.\n\tx\u2022(1 to: self length) \u2190 self.\n\tx\u2022(self length+1 to: x length) \u2190 arg.  \u21d1x]'.",
        "alto_source": "doIt [^[Array understands: 'reverse\t\n\t[^Substring new data: self map: (self length to: 1 by: \u00151)]'.\nArray understands: 'concat: arg | x\n\t[x _ self species new: self length + arg length.\n\tx!(1 to: self length) _ self.\n\tx!(self length+1 to: x length) _ arg.  ^x]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'reverse\\011\\012\\011[^Substring new data: self map: (self length to: 1 by: \\0251)]'",
            "#.",
            "#Array",
            "#understands:",
            "'concat: arg | x\\012\\011[x _ self species new: self length + arg length.\\012\\011x!(1 to: self length) _ self.\\012\\011x!(self length+1 to: x length) _ arg.  ^x]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'copy\n\t[\u21d1self copyto: (self species new: self length)]'.\nArray understands: 'copyto: t | i s\n\t[s \u2190 t asStream.\n\tfor% i from: self do%\n\t\t[s next\u2190 i]\n\t\u21d1t]'.",
        "alto_source": "doIt [^[Array understands: 'copy\n\t[^self copyto: (self species new: self length)]'.\nArray understands: 'copyto: t | i s\n\t[s _ t asStream.\n\tfor% i from: self do%\n\t\t[s next_ i]\n\t^t]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'copy\\012\\011[^self copyto: (self species new: self length)]'",
            "#.",
            "#Array",
            "#understands:",
            "'copyto: t | i s\\012\\011[s _ t asStream.\\012\\011for% i from: self do%\\012\\011\\011[s next_ i]\\012\\011^t]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'replace: a to: b by: s | x t\n\t[x \u2190 self species new: self length+s length -(1+b-a).\n\tx\u2022(1 to: a-1) \u2190 self\u2022(1 to: a-1).  t\u2190a+s length-1.\n\tx\u2022(a to: t) \u2190 s.\n\tx\u2022(t+1 to: x length) \u2190 self\u2022(b+1 to: self length).\n\t\u21d1x]'.",
        "alto_source": "doIt [^[Array understands: 'replace: a to: b by: s | x t\n\t[x _ self species new: self length+s length -(1+b-a).\n\tx!(1 to: a-1) _ self!(1 to: a-1).  t_a+s length-1.\n\tx!(a to: t) _ s.\n\tx!(t+1 to: x length) _ self!(b+1 to: self length).\n\t^x]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'replace: a to: b by: s | x t\\012\\011[x _ self species new: self length+s length -(1+b-a).\\012\\011x!(1 to: a-1) _ self!(1 to: a-1).  t_a+s length-1.\\012\\011x!(a to: t) _ s.\\012\\011x!(t+1 to: x length) _ self!(b+1 to: self length).\\012\\011^x]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'growby: n\n\t[\u21d1self copyto: (self species new: self length+n)]'.\nArray understands: 'grow\n\t[\u21d1self copyto: (self species new: (4 max: self length*2))]'.",
        "alto_source": "doIt [^[Array understands: 'growby: n\n\t[^self copyto: (self species new: self length+n)]'.\nArray understands: 'grow\n\t[^self copyto: (self species new: (4 max: self length*2))]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'growby: n\\012\\011[^self copyto: (self species new: self length+n)]'",
            "#.",
            "#Array",
            "#understands:",
            "'grow\\012\\011[^self copyto: (self species new: (4 max: self length*2))]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'last\n\t[\u21d1self\u2022self length]'.\nArray understands: 'last \u2190 val\n\t[\u21d1self\u2022self length \u2190 val]'.",
        "alto_source": "doIt [^[Array understands: 'last\n\t[^self!self length]'.\nArray understands: 'last _ val\n\t[^self!self length _ val]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'last\\012\\011[^self!self length]'",
            "#.",
            "#Array",
            "#understands:",
            "'last _ val\\012\\011[^self!self length _ val]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'species\n\t[\u21d1Vector]'.",
        "alto_source": "doIt [^[Array understands: 'species\n\t[^Vector]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'species\\012\\011[^Vector]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'read\n\t[\u21d1self new asStream read]'.\nArray understands: 'asStream\n\t[\u21d1Stream new of: self]'.\nArray understands: 'isIntervalBy1\n\t[\u21d1false]'.",
        "alto_source": "doIt [^[Array understands: 'read\n\t[^self new asStream read]'.\nArray understands: 'asStream\n\t[^Stream new of: self]'.\nArray understands: 'isIntervalBy1\n\t[^false]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'read\\012\\011[^self new asStream read]'",
            "#.",
            "#Array",
            "#understands:",
            "'asStream\\012\\011[^Stream new of: self]'",
            "#.",
            "#Array",
            "#understands:",
            "'isIntervalBy1\\012\\011[^false]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Array understands: 'swap: i with: j | t\n\t[t \u2190 self\u2022i. self\u2022i \u2190 self\u2022j. self\u2022j \u2190 t]'.",
        "alto_source": "doIt [^[Array understands: 'swap: i with: j | t\n\t[t _ self!i. self!i _ self!j. self!j _ t]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Array",
            "#understands:",
            "'swap: i with: j | t\\012\\011[t _ self!i. self!i _ self!j. self!j _ t]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Vector, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Vector, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Vector, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"VariableLengthClass new title: 'Vector';\n\tsubclassof: Array\"\t\t\"Array of objects\"",
        "alto_source": "doIt [^[\"VariableLengthClass new title: 'Vector';\n\tsubclassof: Array\"\t\t\"Array of objects\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Vector understands: ', x | v\n\t[v \u2190 self growby: 1.\t\"use a stream if youre in a hurry\"\n\tv last \u2190 x. \u21d1v]'.\nVector understands: 'printon: strm | i\n\t[strm append: ''(''.\n\tfor% i to: self length-1 do%\n\t\t[strm print: self\u2022i; append: '', ''].\n\t[self length\u22651\u21d2[strm print: self last]].\t\t\"hh: allow empty Vectors\"\n\tstrm append: '')'' ]'.",
        "alto_source": "doIt [^[Vector understands: ', x | v\n\t[v _ self growby: 1.\t\"use a stream if youre in a hurry\"\n\tv last _ x. ^v]'.\nVector understands: 'printon: strm | i\n\t[strm append: ''(''.\n\tfor% i to: self length-1 do%\n\t\t[strm print: self!i; append: '', ''].\n\t[self length\u00121?[strm print: self last]].\t\t\"hh: allow empty Vectors\"\n\tstrm append: '')'' ]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Vector",
            "#understands:",
            "', x | v\\012\\011[v _ self growby: 1.\\011\"use a stream if youre in a hurry\"\\012\\011v last _ x. ^v]'",
            "#.",
            "#Vector",
            "#understands:",
            "'printon: strm | i\\012\\011[strm append: '('.\\012\\011for% i to: self length-1 do%\\012\\011\\011[strm print: self!i; append: ', '].\\012\\011[self length\\0221?[strm print: self last]].\\011\\011\"hh: allow empty Vectors\"\\012\\011strm append: ')' ]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'String, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'String, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'String, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"VariableLengthClass new title: 'String';\n\tsubclassof: Array;\n\tbytesize: 8\"\t\t\"Array of 8-bit bytes\"",
        "alto_source": "doIt [^[\"VariableLengthClass new title: 'String';\n\tsubclassof: Array;\n\tbytesize: 8\"\t\t\"Array of 8-bit bytes\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "String understands: 'word: x\t\t\"read word in String\"\n\t[\u21d1self\u2022(2*x) + (self\u2022(2*x-1) lshift: 8)]'.\nString understands: 'word: x \u2190 y\t\t\"write word in String\"\n\t[self\u2022(2*x) \u2190 y land: 0377.\n\tself\u2022(2*x-1) \u2190 y lshift: \u203e8. \u21d1y]'.",
        "alto_source": "doIt [^[String understands: 'word: x\t\t\"read word in String\"\n\t[^self!(2*x) + (self!(2*x-1) lshift: 8)]'.\nString understands: 'word: x _ y\t\t\"write word in String\"\n\t[self!(2*x) _ y land: 0377.\n\tself!(2*x-1) _ y lshift: \u00158. ^y]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#String",
            "#understands:",
            "'word: x\\011\\011\"read word in String\"\\012\\011[^self!(2*x) + (self!(2*x-1) lshift: 8)]'",
            "#.",
            "#String",
            "#understands:",
            "'word: x _ y\\011\\011\"write word in String\"\\012\\011[self!(2*x) _ y land: 0377.\\012\\011self!(2*x-1) _ y lshift: \\0258. ^y]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "String understands: 'printon: strm | x\t\"print inside string quotes\"\n\t[strm next\u2190 047.\n\tfor% x from: self do%\n\t\t[strm next\u2190 x.\n\t\tx=047\u21d2[strm next\u2190 x]]\t\t\"imbedded quotes get doubled\"\n\tstrm next\u2190 047]'.",
        "alto_source": "doIt [^[String understands: 'printon: strm | x\t\"print inside string quotes\"\n\t[strm next_ 047.\n\tfor% x from: self do%\n\t\t[strm next_ x.\n\t\tx=047?[strm next_ x]]\t\t\"imbedded quotes get doubled\"\n\tstrm next_ 047]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#String",
            "#understands:",
            "'printon: strm | x\\011\"print inside string quotes\"\\012\\011[strm next_ 047.\\012\\011for% x from: self do%\\012\\011\\011[strm next_ x.\\012\\011\\011x=047?[strm next_ x]]\\011\\011\"imbedded quotes get doubled\"\\012\\011strm next_ 047]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "String understands: 'species\n\t[\u21d1String]'.\nString understands: 'asVector\n\t[\u21d1self asStream asVector]'.",
        "alto_source": "doIt [^[String understands: 'species\n\t[^String]'.\nString understands: 'asVector\n\t[^self asStream asVector]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#String",
            "#understands:",
            "'species\\012\\011[^String]'",
            "#.",
            "#String",
            "#understands:",
            "'asVector\\012\\011[^self asStream asVector]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"String understands: 'asParagraph\n\t[\u21d1Paragraph new text: self alignment: 0]'.\"",
        "alto_source": "doIt [^[\"String understands: 'asParagraph\n\t[^Paragraph new text: self alignment: 0]'.\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "String understands: 'recopy\n\t[\u21d1self copy]'.",
        "alto_source": "doIt [^[String understands: 'recopy\n\t[^self copy]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#String",
            "#understands:",
            "'recopy\\012\\011[^self copy]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "String understands: 'subst: repl for: key | key1 i nskip result\n\t[nskip \u2190 0. key1 \u2190 key\u20221. result \u2190 Stream default.\n\tfor% i to: self length do%\t\t\" the Boyer Slow string replacement \"\n\t\t[nskip>0\u21d2 [nskip \u2190 nskip-1]\n\t\tself\u2022i = key1\u21d2\n\t\t\t[self\u2022(i to: (self length min: i+key length-1)) = key\u21d2\n\t\t\t\t[result append: repl. nskip \u2190 key length-1]\n\t\t\tresult next\u2190 self\u2022i]\n\t\tresult next\u2190 self\u2022i]\n\t\u21d1result contents]'.",
        "alto_source": "doIt [^[String understands: 'subst: repl for: key | key1 i nskip result\n\t[nskip _ 0. key1 _ key!1. result _ Stream default.\n\tfor% i to: self length do%\t\t\" the Boyer Slow string replacement \"\n\t\t[nskip>0? [nskip _ nskip-1]\n\t\tself!i = key1?\n\t\t\t[self!(i to: (self length min: i+key length-1)) = key?\n\t\t\t\t[result append: repl. nskip _ key length-1]\n\t\t\tresult next_ self!i]\n\t\tresult next_ self!i]\n\t^result contents]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#String",
            "#understands:",
            "'subst: repl for: key | key1 i nskip result\\012\\011[nskip _ 0. key1 _ key!1. result _ Stream default.\\012\\011for% i to: self length do%\\011\\011\" the Boyer Slow string replacement \"\\012\\011\\011[nskip>0? [nskip _ nskip-1]\\012\\011\\011self!i = key1?\\012\\011\\011\\011[self!(i to: (self length min: i+key length-1)) = key?\\012\\011\\011\\011\\011[result append: repl. nskip _ key length-1]\\012\\011\\011\\011result next_ self!i]\\012\\011\\011result next_ self!i]\\012\\011^result contents]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "String understands: 'unique | u\t\t\"copy and intern\"\n\t[u \u2190 UniqueString new: self length.\n\t\u21d1u of: self]'.\nString understands: 'hash | x h\t\t\"not great, but compatible with FT atom hashing\"\n\t[h \u2190 13131.\n\tfor% x from: self do%\n\t\t[h \u2190 x * h.\n\t\th \u2190 (h lshift: \u203e1)+(h lshift: 15) land: 65535 \"hh, keep 16 bits\"]\n\t\u21d1h]'.",
        "alto_source": "doIt [^[String understands: 'unique | u\t\t\"copy and intern\"\n\t[u _ UniqueString new: self length.\n\t^u of: self]'.\nString understands: 'hash | x h\t\t\"not great, but compatible with FT atom hashing\"\n\t[h _ 13131.\n\tfor% x from: self do%\n\t\t[h _ x * h.\n\t\th _ (h lshift: \u00151)+(h lshift: 15) land: 65535 \"hh, keep 16 bits\"]\n\t^h]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#String",
            "#understands:",
            "'unique | u\\011\\011\"copy and intern\"\\012\\011[u _ UniqueString new: self length.\\012\\011^u of: self]'",
            "#.",
            "#String",
            "#understands:",
            "'hash | x h\\011\\011\"not great, but compatible with FT atom hashing\"\\012\\011[h _ 13131.\\012\\011for% x from: self do%\\012\\011\\011[h _ x * h.\\012\\011\\011h _ (h lshift: \\0251)+(h lshift: 15) land: 65535 \"hh, keep 16 bits\"]\\012\\011^h]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "String understands: '+ s [^self concat: s]\t\"hh, smuggled in\"'",
        "alto_source": "doIt [^[String understands: '+ s [^self concat: s]\t\"hh, smuggled in\"']]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#String",
            "#understands:",
            "'+ s [^self concat: s]\\011\"hh, smuggled in\"'",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'UniqueString, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'UniqueString, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'UniqueString, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"VariableLengthClass new title: 'UniqueString';\n\tsubclassof: String;\n\tbytesize: 8\"\t\t\"allows fast compare (eq) for tables\"",
        "alto_source": "doIt [^[\"VariableLengthClass new title: 'UniqueString';\n\tsubclassof: String;\n\tbytesize: 8\"\t\t\"allows fast compare (eq) for tables\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "UniqueString understands: 'of: s | i a v \n\t[a \u2190 self intern: s hash: (i\u2190s hash)\u21d2 [\u21d1a]\n\ti \u2190 1+(i lshift: \u203e8).\n\tv \u2190 USTable\u2022i.\n\tUSTable\u2022i \u2190 Vector new: 2*v length.\t\t\"grow that hash bucket\"\n\tfor% a from: v do%\t\t\"copy all its contents\"\n\t\t[a\u2261nil\u21d2 []\n\t\tself intern: a hash: a stringhash]\n\t\u21d1self of: s]'.\t\t\"and try again... \"\nUniqueString understands: 'intern: s hash: h| i j v n\n\t[v \u2190 USTable\u2022(1+(h lshift: \u203e8)).\n\tfor% i to: v length do%\t\t\"interning compatible with FT atoms - change it soon\"\n\t\t[h \u2190 h\\v length+1.\n\t\tv\u2022h\u2261nil\u21d2\t\t\"empty slot\"\n\t\t\t[s is: UniqueString\u21d2 [\u21d1v\u2022h \u2190 s]\t\t\"(when growing)\"\n\t\t\tn\u2190 0.  for% j from: v do%\n\t\t\t\t[j\u2261nil\u21d2 [n \u2190 n+1]]\t\t\"count # empty slots\"\n\t\t\t4*n < v length\u21d2[\u21d1false]\t\"grow if not 1/4 \"\n\t\t\tfor% j to: s length do%\t\t\"copy string\"\n\t\t\t\t[super\u2022j \u2190 s\u2022j]\t\"where there-s a will there-s a way\"\n\t\t\t\u21d1v\u2022h \u2190 self]\t\t\"and install self as the atom\"\n\t\ts=(v\u2022h)\u21d2[\u21d1v\u2022h]]\n\tuser notify: ''USTable jammed (UniqueString)'']'.\nUniqueString understands: 'stringhash\n\t[\u21d1super hash]'.",
        "alto_source": "doIt [^[UniqueString understands: 'of: s | i a v \n\t[a _ self intern: s hash: (i_s hash)? [^a]\n\ti _ 1+(i lshift: \u00158).\n\tv _ USTable!i.\n\tUSTable!i _ Vector new: 2*v length.\t\t\"grow that hash bucket\"\n\tfor% a from: v do%\t\t\"copy all its contents\"\n\t\t[a\u0006nil? []\n\t\tself intern: a hash: a stringhash]\n\t^self of: s]'.\t\t\"and try again... \"\nUniqueString understands: 'intern: s hash: h| i j v n\n\t[v _ USTable!(1+(h lshift: \u00158)).\n\tfor% i to: v length do%\t\t\"interning compatible with FT atoms - change it soon\"\n\t\t[h _ h\\v length+1.\n\t\tv!h\u0006nil?\t\t\"empty slot\"\n\t\t\t[s is: UniqueString? [^v!h _ s]\t\t\"(when growing)\"\n\t\t\tn_ 0.  for% j from: v do%\n\t\t\t\t[j\u0006nil? [n _ n+1]]\t\t\"count # empty slots\"\n\t\t\t4*n < v length?[^false]\t\"grow if not 1/4 \"\n\t\t\tfor% j to: s length do%\t\t\"copy string\"\n\t\t\t\t[super!j _ s!j]\t\"where there-s a will there-s a way\"\n\t\t\t^v!h _ self]\t\t\"and install self as the atom\"\n\t\ts=(v!h)?[^v!h]]\n\tuser notify: ''USTable jammed (UniqueString)'']'.\nUniqueString understands: 'stringhash\n\t[^super hash]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#UniqueString",
            "#understands:",
            "'of: s | i a v \\012\\011[a _ self intern: s hash: (i_s hash)? [^a]\\012\\011i _ 1+(i lshift: \\0258).\\012\\011v _ USTable!i.\\012\\011USTable!i _ Vector new: 2*v length.\\011\\011\"grow that hash bucket\"\\012\\011for% a from: v do%\\011\\011\"copy all its contents\"\\012\\011\\011[a\\006nil? []\\012\\011\\011self intern: a hash: a stringhash]\\012\\011^self of: s]'",
            "#.",
            "#UniqueString",
            "#understands:",
            "'intern: s hash: h| i j v n\\012\\011[v _ USTable!(1+(h lshift: \\0258)).\\012\\011for% i to: v length do%\\011\\011\"interning compatible with FT atoms - change it soon\"\\012\\011\\011[h _ h\\v length+1.\\012\\011\\011v!h\\006nil?\\011\\011\"empty slot\"\\012\\011\\011\\011[s is: UniqueString? [^v!h _ s]\\011\\011\"(when growing)\"\\012\\011\\011\\011n_ 0.  for% j from: v do%\\012\\011\\011\\011\\011[j\\006nil? [n _ n+1]]\\011\\011\"count # empty slots\"\\012\\011\\011\\0114*n < v length?[^false]\\011\"grow if not 1/4 \"\\012\\011\\011\\011for% j to: s length do%\\011\\011\"copy string\"\\012\\011\\011\\011\\011[super!j _ s!j]\\011\"where there-s a will there-s a way\"\\012\\011\\011\\011^v!h _ self]\\011\\011\"and install self as the atom\"\\012\\011\\011s=(v!h)?[^v!h]]\\012\\011user notify: 'USTable jammed (UniqueString)']'",
            "#.",
            "#UniqueString",
            "#understands:",
            "'stringhash\\012\\011[^super hash]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "UniqueString understands: '\u2022x \u2190 val\n\t[user notify: ''UniqueStrings are not for writing into'']'.",
        "alto_source": "doIt [^[UniqueString understands: '!x _ val\n\t[user notify: ''UniqueStrings are not for writing into'']'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#UniqueString",
            "#understands:",
            "'!x _ val\\012\\011[user notify: 'UniqueStrings are not for writing into']'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "UniqueString understands: 'printon: strm\n\t[strm append: self]'.",
        "alto_source": "doIt [^[UniqueString understands: 'printon: strm\n\t[strm append: self]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#UniqueString",
            "#understands:",
            "'printon: strm\\012\\011[strm append: self]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "UniqueString understands: 'isinfix\t\t\"one-char non-alpha\"\n\t[self length\u22601\u21d2 [\u21d1false]  \u21d1(self\u20221) isletter\u2261false]'.\nUniqueString understands: 'iskeyword | x\t\"ends with open or closed colon\"\n\t[self length\u22641\u21d2 [\u21d1false]\n\tx \u2190 self\u2022self length.\n\tx=072\u21d2[\u21d1true] \u21d1x=03]'.\nUniqueString understands: 'isuneval\t\t\"ends with open colon\"\n\t[\u21d1self\u2022self length=03]'.",
        "alto_source": "doIt [^[UniqueString understands: 'isinfix\t\t\"one-char non-alpha\"\n\t[self length\u000e1? [^false]  ^(self!1) isletter\u0006false]'.\nUniqueString understands: 'iskeyword | x\t\"ends with open or closed colon\"\n\t[self length\u00011? [^false]\n\tx _ self!self length.\n\tx=072?[^true] ^x=03]'.\nUniqueString understands: 'isuneval\t\t\"ends with open colon\"\n\t[^self!self length=03]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#UniqueString",
            "#understands:",
            "'isinfix\\011\\011\"one-char non-alpha\"\\012\\011[self length\\0161? [^false]  ^(self!1) isletter\\006false]'",
            "#.",
            "#UniqueString",
            "#understands:",
            "'iskeyword | x\\011\"ends with open or closed colon\"\\012\\011[self length\\0011? [^false]\\012\\011x _ self!self length.\\012\\011x=072?[^true] ^x=03]'",
            "#.",
            "#UniqueString",
            "#understands:",
            "'isuneval\\011\\011\"ends with open colon\"\\012\\011[^self!self length=03]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "UniqueString understands: '= x [\u21d1self\u2261x]'.\t\"pointer compare\"\nUniqueString understands: 'hash [] primitive: 46'.\t\"just the object pointer\"\nUniqueString understands: 'unique'.",
        "alto_source": "doIt [^[UniqueString understands: '= x [^self\u0006x]'.\t\"pointer compare\"\nUniqueString understands: 'hash [] primitive: 46'.\t\"just the object pointer\"\nUniqueString understands: 'unique'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#UniqueString",
            "#understands:",
            "'= x [^self\\006x]'",
            "#.",
            "#UniqueString",
            "#understands:",
            "'hash [] primitive: 46'",
            "#.",
            "#UniqueString",
            "#understands:",
            "'unique'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Substring, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Substring, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Substring, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Substring';\n\tsubclassof: Array;\n\tfields: 'data map'\"\t\t\"Substrings and permutations\"",
        "alto_source": "doIt [^[\"Class new title: 'Substring';\n\tsubclassof: Array;\n\tfields: 'data map'\"\t\t\"Substrings and permutations\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Substring understands: 'data: data map: map'.",
        "alto_source": "doIt [^[Substring understands: 'data: data map: map'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Substring",
            "#understands:",
            "'data: data map: map'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Substring understands: '\u2022 x\n\t[\u21d1data\u2022(map\u2022x)]'.\nSubstring understands: '\u2022 x \u2190 val\n\t[\u21d1data\u2022(map\u2022x) \u2190 val]'.",
        "alto_source": "doIt [^[Substring understands: '! x\n\t[^data!(map!x)]'.\nSubstring understands: '! x _ val\n\t[^data!(map!x) _ val]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Substring",
            "#understands:",
            "'! x\\012\\011[^data!(map!x)]'",
            "#.",
            "#Substring",
            "#understands:",
            "'! x _ val\\012\\011[^data!(map!x) _ val]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Substring understands: 'length\n\t[\u21d1map length]'.\nSubstring understands: 'species\n\t[\u21d1data species]'.",
        "alto_source": "doIt [^[Substring understands: 'length\n\t[^map length]'.\nSubstring understands: 'species\n\t[^data species]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Substring",
            "#understands:",
            "'length\\012\\011[^map length]'",
            "#.",
            "#Substring",
            "#understands:",
            "'species\\012\\011[^data species]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Substring understands: 'asStream\n\t[map isIntervalBy1\u21d2\t\"direct stream for simple substrings\"\n\t\t[\u21d1Stream new of: data from: map start to: map stop]\n\t\u21d1Stream new of: self from: 1 to: map length]'.",
        "alto_source": "doIt [^[Substring understands: 'asStream\n\t[map isIntervalBy1?\t\"direct stream for simple substrings\"\n\t\t[^Stream new of: data from: map start to: map stop]\n\t^Stream new of: self from: 1 to: map length]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Substring",
            "#understands:",
            "'asStream\\012\\011[map isIntervalBy1?\\011\"direct stream for simple substrings\"\\012\\011\\011[^Stream new of: data from: map start to: map stop]\\012\\011^Stream new of: self from: 1 to: map length]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Interval, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Interval, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Interval, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Interval';\n\tsubclassof: Array;\n\tfields: 'start stop step length'.\"\t\"Intervals - Integer or Float\"",
        "alto_source": "doIt [^[\"Class new title: 'Interval';\n\tsubclassof: Array;\n\tfields: 'start stop step length'.\"\t\"Intervals - Integer or Float\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Interval understands: 'from: start to: stop by: step\n\t[length \u2190 1+(stop-start/step)]'.",
        "alto_source": "doIt [^[Interval understands: 'from: start to: stop by: step\n\t[length _ 1+(stop-start/step)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Interval",
            "#understands:",
            "'from: start to: stop by: step\\012\\011[length _ 1+(stop-start/step)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Interval understands: '\u2022 x\n\t[x<1\u21d2 [\u21d1nil]\n\tx>length\u21d2 [\u21d1nil]\n\t\u21d1start+(x-1*step)]'.\nInterval understands: '\u2022 x \u2190 val\n\t[user notify: ''Intervals are not for writing into'']'.\nInterval understands: 'length [\u21d1length]'.",
        "alto_source": "doIt [^[Interval understands: '! x\n\t[x<1? [^nil]\n\tx>length? [^nil]\n\t^start+(x-1*step)]'.\nInterval understands: '! x _ val\n\t[user notify: ''Intervals are not for writing into'']'.\nInterval understands: 'length [^length]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Interval",
            "#understands:",
            "'! x\\012\\011[x<1? [^nil]\\012\\011x>length? [^nil]\\012\\011^start+(x-1*step)]'",
            "#.",
            "#Interval",
            "#understands:",
            "'! x _ val\\012\\011[user notify: 'Intervals are not for writing into']'",
            "#.",
            "#Interval",
            "#understands:",
            "'length [^length]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Interval understands: 'isIntervalBy1\n\t[\u21d1step=1]'.\nInterval understands: 'start [\u21d1start]'.\nInterval understands: 'stop [\u21d1stop]'.",
        "alto_source": "doIt [^[Interval understands: 'isIntervalBy1\n\t[^step=1]'.\nInterval understands: 'start [^start]'.\nInterval understands: 'stop [^stop]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Interval",
            "#understands:",
            "'isIntervalBy1\\012\\011[^step=1]'",
            "#.",
            "#Interval",
            "#understands:",
            "'start [^start]'",
            "#.",
            "#Interval",
            "#understands:",
            "'stop [^stop]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"STREAMS\"",
        "alto_source": "doIt [^[\"STREAMS\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Stream, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Stream, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Stream, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Stream';\n\tfields: 'array position limit'\"",
        "alto_source": "doIt [^[\"Class new title: 'Stream';\n\tfields: 'array position limit'\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'of: array\n\t[position \u2190 0. limit \u2190 array length]'.\nStream understands: 'of: array from: position to: limit\n\t[position \u2190 position-1]'.\nStream understands: 'default\n\t[self of: (String new: 8)]'.",
        "alto_source": "doIt [^[Stream understands: 'of: array\n\t[position _ 0. limit _ array length]'.\nStream understands: 'of: array from: position to: limit\n\t[position _ position-1]'.\nStream understands: 'default\n\t[self of: (String new: 8)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'of: array\\012\\011[position _ 0. limit _ array length]'",
            "#.",
            "#Stream",
            "#understands:",
            "'of: array from: position to: limit\\012\\011[position _ position-1]'",
            "#.",
            "#Stream",
            "#understands:",
            "'default\\012\\011[self of: (String new: 8)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'next\t\"simple result\"\n\t[self myend\u21d2 [\u21d1self pastend]\n\t\u21d1array\u2022(position \u2190 position+1)] primitive: 17'.\nStream understands: 'next \u2190 x\t\t\"simple arg\"\n\t[self myend\u21d2 [\u21d1self pastend \u2190 x]\n\t\u21d1array\u2022(position \u2190 position+1) \u2190 x] primitive: 18'.",
        "alto_source": "doIt [^[Stream understands: 'next\t\"simple result\"\n\t[self myend? [^self pastend]\n\t^array!(position _ position+1)] primitive: 17'.\nStream understands: 'next _ x\t\t\"simple arg\"\n\t[self myend? [^self pastend _ x]\n\t^array!(position _ position+1) _ x] primitive: 18'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'next\\011\"simple result\"\\012\\011[self myend? [^self pastend]\\012\\011^array!(position _ position+1)] primitive: 17'",
            "#.",
            "#Stream",
            "#understands:",
            "'next _ x\\011\\011\"simple arg\"\\012\\011[self myend? [^self pastend _ x]\\012\\011^array!(position _ position+1) _ x] primitive: 18'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'append: x | i\t\"Array arg\"\n\t[for% i from: x do%\n\t\t[self next \u2190 i].\n\t\u21d1x]'.\nStream understands: 'myend\n\t[\u21d1position\u2265limit]'.\nStream understands: 'pastend\n\t[\u21d1false]'.\nStream understands: 'pastend \u2190 x\n\t[array \u2190 array grow. limit \u2190 array length.\n\t\u21d1self next \u2190 x]'.",
        "alto_source": "doIt [^[Stream understands: 'append: x | i\t\"Array arg\"\n\t[for% i from: x do%\n\t\t[self next _ i].\n\t^x]'.\nStream understands: 'myend\n\t[^position\u0012limit]'.\nStream understands: 'pastend\n\t[^false]'.\nStream understands: 'pastend _ x\n\t[array _ array grow. limit _ array length.\n\t^self next _ x]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'append: x | i\\011\"Array arg\"\\012\\011[for% i from: x do%\\012\\011\\011[self next _ i].\\012\\011^x]'",
            "#.",
            "#Stream",
            "#understands:",
            "'myend\\012\\011[^position\\022limit]'",
            "#.",
            "#Stream",
            "#understands:",
            "'pastend\\012\\011[^false]'",
            "#.",
            "#Stream",
            "#understands:",
            "'pastend _ x\\012\\011[array _ array grow. limit _ array length.\\012\\011^self next _ x]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'into: x | i\t\t\"Array result\"\n\t[for% i to: x length do%\n\t\t[x\u2022i \u2190 self next].\n\t\u21d1x]'.\nStream understands: 'contents\n\t[\u21d1(array\u2022(1 to: position)) copy]'.",
        "alto_source": "doIt [^[Stream understands: 'into: x | i\t\t\"Array result\"\n\t[for% i to: x length do%\n\t\t[x!i _ self next].\n\t^x]'.\nStream understands: 'contents\n\t[^(array!(1 to: position)) copy]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'into: x | i\\011\\011\"Array result\"\\012\\011[for% i to: x length do%\\012\\011\\011[x!i _ self next].\\012\\011^x]'",
            "#.",
            "#Stream",
            "#understands:",
            "'contents\\012\\011[^(array!(1 to: position)) copy]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'skip: x\n\t[position \u2190 position+x]'.\nStream understands: 'reset\n\t[position \u2190 0]'.\nStream understands: 'end\n\t[\u21d1position\u2265limit]'.\nStream understands: 'position\n\t[\u21d1position]'.\nStream understands: 'loc\t\"synonym for compiler\"\n\t[\u21d1position]'.\nStream understands: 'empty\n\t[\u21d1position=0]'.",
        "alto_source": "doIt [^[Stream understands: 'skip: x\n\t[position _ position+x]'.\nStream understands: 'reset\n\t[position _ 0]'.\nStream understands: 'end\n\t[^position\u0012limit]'.\nStream understands: 'position\n\t[^position]'.\nStream understands: 'loc\t\"synonym for compiler\"\n\t[^position]'.\nStream understands: 'empty\n\t[^position=0]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'skip: x\\012\\011[position _ position+x]'",
            "#.",
            "#Stream",
            "#understands:",
            "'reset\\012\\011[position _ 0]'",
            "#.",
            "#Stream",
            "#understands:",
            "'end\\012\\011[^position\\022limit]'",
            "#.",
            "#Stream",
            "#understands:",
            "'position\\012\\011[^position]'",
            "#.",
            "#Stream",
            "#understands:",
            "'loc\\011\"synonym for compiler\"\\012\\011[^position]'",
            "#.",
            "#Stream",
            "#understands:",
            "'empty\\012\\011[^position=0]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x26\\x40\\xd2\\x82\\x27\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'peek | x\n\t[x\u2190 self next\u21d2 [position \u2190 position-1.  \u21d1x]\t\t\"peek at next element\"\n\t\u21d1false]'.\nStream understands: '\u2222 x | y\n\t[y\u2190 self next\u21d2\t\t\"peek for matching element\"\n\t\t[x=y\u21d2 [\u21d1y]\t\t\"gobble it if found\"\n\t\tposition \u2190 position-1. \u21d1false]\n\t\u21d1false]'.",
        "alto_source": "doIt [^[Stream understands: 'peek | x\n\t[x_ self next? [position _ position-1.  ^x]\t\t\"peek at next element\"\n\t^false]'.\nStream understands: '\u0016 x | y\n\t[y_ self next?\t\t\"peek for matching element\"\n\t\t[x=y? [^y]\t\t\"gobble it if found\"\n\t\tposition _ position-1. ^false]\n\t^false]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'peek | x\\012\\011[x_ self next? [position _ position-1.  ^x]\\011\\011\"peek at next element\"\\012\\011^false]'",
            "#.",
            "#Stream",
            "#understands:",
            "'\\026 x | y\\012\\011[y_ self next?\\011\\011\"peek for matching element\"\\012\\011\\011[x=y? [^y]\\011\\011\"gobble it if found\"\\012\\011\\011position _ position-1. ^false]\\012\\011^false]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'pop\t\t\"use it as a LIFO\"\n\t[position<1\u21d2 [\u21d1false]\n\tposition \u2190 position-1. \u21d1array\u2022(position+1)]'.\nStream understands: 'pop: n | t\n\t[position<n\u21d2 [\u21d1false]\n\tt \u2190 self last: n.\n\tposition \u2190 position-n. \u21d1t]'.",
        "alto_source": "doIt [^[Stream understands: 'pop\t\t\"use it as a LIFO\"\n\t[position<1? [^false]\n\tposition _ position-1. ^array!(position+1)]'.\nStream understands: 'pop: n | t\n\t[position<n? [^false]\n\tt _ self last: n.\n\tposition _ position-n. ^t]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'pop\\011\\011\"use it as a LIFO\"\\012\\011[position<1? [^false]\\012\\011position _ position-1. ^array!(position+1)]'",
            "#.",
            "#Stream",
            "#understands:",
            "'pop: n | t\\012\\011[position<n? [^false]\\012\\011t _ self last: n.\\012\\011position _ position-n. ^t]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'last\n\t[\u21d1array\u2022position]'.\nStream understands: 'last: n\n\t[\u21d1(array\u2022(position-n+1 to: position)) copy]'.",
        "alto_source": "doIt [^[Stream understands: 'last\n\t[^array!position]'.\nStream understands: 'last: n\n\t[^(array!(position-n+1 to: position)) copy]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'last\\012\\011[^array!position]'",
            "#.",
            "#Stream",
            "#understands:",
            "'last: n\\012\\011[^(array!(position-n+1 to: position)) copy]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'dequeue\t\t\"use it as a FIFO\"\n\t[\u21d1self dequeue: 1]'.\nStream understands: 'dequeue: n | t\n\t[position<n\u21d2 [\u21d1false]\n\tt \u2190 (array\u2022(1 to: n)) copy.\n\tarray\u2022(1 to: position-n) \u2190 array\u2022(n+1 to: position).\n\tposition \u2190 position-n. \u21d1t]'.",
        "alto_source": "doIt [^[Stream understands: 'dequeue\t\t\"use it as a FIFO\"\n\t[^self dequeue: 1]'.\nStream understands: 'dequeue: n | t\n\t[position<n? [^false]\n\tt _ (array!(1 to: n)) copy.\n\tarray!(1 to: position-n) _ array!(n+1 to: position).\n\tposition _ position-n. ^t]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'dequeue\\011\\011\"use it as a FIFO\"\\012\\011[^self dequeue: 1]'",
            "#.",
            "#Stream",
            "#understands:",
            "'dequeue: n | t\\012\\011[position<n? [^false]\\012\\011t _ (array!(1 to: n)) copy.\\012\\011array!(1 to: position-n) _ array!(n+1 to: position).\\012\\011position _ position-n. ^t]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'upto: x | y s\n\t[s \u2190 Stream default.\n\tuntil% [x = (y \u2190 self next)] do%\n\t\t[s next \u2190 y].\n\tself skip: \u203e1.  \u21d1s contents]'.",
        "alto_source": "doIt [^[Stream understands: 'upto: x | y s\n\t[s _ Stream default.\n\tuntil% [x = (y _ self next)] do%\n\t\t[s next _ y].\n\tself skip: \u00151.  ^s contents]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'upto: x | y s\\012\\011[s _ Stream default.\\012\\011until% [x = (y _ self next)] do%\\012\\011\\011[s next _ y].\\012\\011self skip: \\0251.  ^s contents]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: '\u2022 x \u2190 val\n\t[\u21d1array\u2022x \u2190 val]'.\nStream understands: '\u2022 x\n\t[\u21d1array\u2022x]'.",
        "alto_source": "doIt [^[Stream understands: '! x _ val\n\t[^array!x _ val]'.\nStream understands: '! x\n\t[^array!x]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'! x _ val\\012\\011[^array!x _ val]'",
            "#.",
            "#Stream",
            "#understands:",
            "'! x\\012\\011[^array!x]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'space\n\t[self next \u2190 040]'.\nStream understands: 'tab\n\t[self next \u2190 011]'.\nStream understands: 'cr\n\t[self next \u2190 015]'.",
        "alto_source": "doIt [^[Stream understands: 'space\n\t[self next _ 040]'.\nStream understands: 'tab\n\t[self next _ 011]'.\nStream understands: 'cr\n\t[self next _ 015]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'space\\012\\011[self next _ 040]'",
            "#.",
            "#Stream",
            "#understands:",
            "'tab\\012\\011[self next _ 011]'",
            "#.",
            "#Stream",
            "#understands:",
            "'cr\\012\\011[self next _ 015]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'print: obj\n\t[obj printon: self]'.",
        "alto_source": "doIt [^[Stream understands: 'print: obj\n\t[obj printon: self]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'print: obj\\012\\011[obj printon: self]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Stream understands: 'asStream'.\nStream understands: 'asVector\n\t[\u21d1(Reader new of: self) read]'.",
        "alto_source": "doIt [^[Stream understands: 'asStream'.\nStream understands: 'asVector\n\t[^(Reader new of: self) read]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Stream",
            "#understands:",
            "'asStream'",
            "#.",
            "#Stream",
            "#understands:",
            "'asVector\\012\\011[^(Reader new of: self) read]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"GRAPHICAL OBJECTS\"",
        "alto_source": "doIt [^[\"GRAPHICAL OBJECTS\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"(Point, Rectangle, Turtle skipped)\"\n\"(Textframe, Paragraph, TextStyle, Dispframe skipped)\"",
        "alto_source": "doIt [^[\"(Point, Rectangle, Turtle skipped)\"\n\"(Textframe, Paragraph, TextStyle, Dispframe skipped)\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"SETS AND DICTIONARIES\"",
        "alto_source": "doIt [^[\"SETS AND DICTIONARIES\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'HashSet, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'HashSet, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'HashSet, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'HashSet';\n\tfields: 'objects'\"",
        "alto_source": "doIt [^[\"Class new title: 'HashSet';\n\tfields: 'objects'\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HashSet understands: 'default\n\t[self init: 4]'.\t\"default initial size\"\nHashSet understands: 'init\n\t[self init: 4]'.\t\"obsolete\"\nHashSet understands: 'init: size\n\t[objects \u2190 Vector new: (size max: 4)]'.",
        "alto_source": "doIt [^[HashSet understands: 'default\n\t[self init: 4]'.\t\"default initial size\"\nHashSet understands: 'init\n\t[self init: 4]'.\t\"obsolete\"\nHashSet understands: 'init: size\n\t[objects _ Vector new: (size max: 4)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HashSet",
            "#understands:",
            "'default\\012\\011[self init: 4]'",
            "#.",
            "#HashSet",
            "#understands:",
            "'init\\012\\011[self init: 4]'",
            "#.",
            "#HashSet",
            "#understands:",
            "'init: size\\012\\011[objects _ Vector new: (size max: 4)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HashSet understands: 'insert: obj | i\n\t[self findorinsert: obj. \u21d1obj]'.\nHashSet understands: 'has: obj\n\t[self find: obj\u21d2 [\u21d1true] \u21d1false]'.\nHashSet understands: 'findorinsert: obj | i\t\t\"insert if not found, \"\n\t[i \u2190 self findornil: obj\u21d2 [objects\u2022i \u2190 obj. \u21d1i]\n\tself growto: objects length*2.\t\"may cause table to grow\"\n\t\u21d1self findorinsert: obj]'.\nHashSet understands: 'find: obj | i\t\"\u21d1index if found, else false\"\n\t[i \u2190 self findornil: obj\u21d2\n\t\t[objects\u2022i\u2261nil\u21d2 [\u21d1false] \u21d1i]\n\t\u21d1false]'.\nHashSet understands: 'findornil: obj | i loc\t\"\u21d1index if found or if room, else false\"\n\t[loc \u2190 obj hash\\objects length+1.\t\"does this match the ucode\"\n\tobjects\u2022loc \u2261 nil\u21d2 [\u21d1loc]\n\tobjects\u2022loc = obj\u21d2 [\u21d1loc]\t\"first probe cheap\"\n\tfor% i to: (4 max: objects length / 4) do%\n\t\t[loc \u2190 loc\\objects length+1.\t\t\"better delta later if necess\"\n\t\tobjects\u2022loc \u2261 nil\u21d2 [\u21d1loc]\n\t\tobjects\u2022loc = obj\u21d2 [\u21d1loc]]\n\t\u21d1false]'.",
        "alto_source": "doIt [^[HashSet understands: 'insert: obj | i\n\t[self findorinsert: obj. ^obj]'.\nHashSet understands: 'has: obj\n\t[self find: obj? [^true] ^false]'.\nHashSet understands: 'findorinsert: obj | i\t\t\"insert if not found, \"\n\t[i _ self findornil: obj? [objects!i _ obj. ^i]\n\tself growto: objects length*2.\t\"may cause table to grow\"\n\t^self findorinsert: obj]'.\nHashSet understands: 'find: obj | i\t\"^index if found, else false\"\n\t[i _ self findornil: obj?\n\t\t[objects!i\u0006nil? [^false] ^i]\n\t^false]'.\nHashSet understands: 'findornil: obj | i loc\t\"^index if found or if room, else false\"\n\t[loc _ obj hash\\objects length+1.\t\"does this match the ucode\"\n\tobjects!loc \u0006 nil? [^loc]\n\tobjects!loc = obj? [^loc]\t\"first probe cheap\"\n\tfor% i to: (4 max: objects length / 4) do%\n\t\t[loc _ loc\\objects length+1.\t\t\"better delta later if necess\"\n\t\tobjects!loc \u0006 nil? [^loc]\n\t\tobjects!loc = obj? [^loc]]\n\t^false]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HashSet",
            "#understands:",
            "'insert: obj | i\\012\\011[self findorinsert: obj. ^obj]'",
            "#.",
            "#HashSet",
            "#understands:",
            "'has: obj\\012\\011[self find: obj? [^true] ^false]'",
            "#.",
            "#HashSet",
            "#understands:",
            "'findorinsert: obj | i\\011\\011\"insert if not found, \"\\012\\011[i _ self findornil: obj? [objects!i _ obj. ^i]\\012\\011self growto: objects length*2.\\011\"may cause table to grow\"\\012\\011^self findorinsert: obj]'",
            "#.",
            "#HashSet",
            "#understands:",
            "'find: obj | i\\011\"^index if found, else false\"\\012\\011[i _ self findornil: obj?\\012\\011\\011[objects!i\\006nil? [^false] ^i]\\012\\011^false]'",
            "#.",
            "#HashSet",
            "#understands:",
            "'findornil: obj | i loc\\011\"^index if found or if room, else false\"\\012\\011[loc _ obj hash\\objects length+1.\\011\"does this match the ucode\"\\012\\011objects!loc \\006 nil? [^loc]\\012\\011objects!loc = obj? [^loc]\\011\"first probe cheap\"\\012\\011for% i to: (4 max: objects length / 4) do%\\012\\011\\011[loc _ loc\\objects length+1.\\011\\011\"better delta later if necess\"\\012\\011\\011objects!loc \\006 nil? [^loc]\\012\\011\\011objects!loc = obj? [^loc]]\\012\\011^false]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x26\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HashSet understands: 'delete: obj | i\n\t[i \u2190 self find: obj\u21d2\n\t\t[objects\u2022i \u2190 nil.\t\"delete, then rehash\"\n\t\t\u21d1self growto: objects length]]'.\t\"returns result of growto\"",
        "alto_source": "doIt [^[HashSet understands: 'delete: obj | i\n\t[i _ self find: obj?\n\t\t[objects!i _ nil.\t\"delete, then rehash\"\n\t\t^self growto: objects length]]'.\t\"returns result of growto\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HashSet",
            "#understands:",
            "'delete: obj | i\\012\\011[i _ self find: obj?\\012\\011\\011[objects!i _ nil.\\011\"delete, then rehash\"\\012\\011\\011^self growto: objects length]]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HashSet understands: 'growto: size | copy i\n\t[copy \u2190 self class new init: size.\t\"create a copy\"\n\tfor% i from: self do%\n\t\t[copy insert: i]\t\"hash each entry into it\"\n\tobjects \u2190 copy objects]\t\t\"then take on all its state\"'.",
        "alto_source": "doIt [^[HashSet understands: 'growto: size | copy i\n\t[copy _ self class new init: size.\t\"create a copy\"\n\tfor% i from: self do%\n\t\t[copy insert: i]\t\"hash each entry into it\"\n\tobjects _ copy objects]\t\t\"then take on all its state\"'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HashSet",
            "#understands:",
            "'growto: size | copy i\\012\\011[copy _ self class new init: size.\\011\"create a copy\"\\012\\011for% i from: self do%\\012\\011\\011[copy insert: i]\\011\"hash each entry into it\"\\012\\011objects _ copy objects]\\011\\011\"then take on all its state\"'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HashSet understands: 'objects [\u21d1objects]'.\nHashSet understands: 'objects\u2190 objects'.",
        "alto_source": "doIt [^[HashSet understands: 'objects [^objects]'.\nHashSet understands: 'objects_ objects'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HashSet",
            "#understands:",
            "'objects [^objects]'",
            "#.",
            "#HashSet",
            "#understands:",
            "'objects_ objects'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HashSet understands: 'contents | obj strm\n\t[strm \u2190 (Vector new: objects length) asStream.\n\tfor% obj from: objects do%\n\t\t[obj\u2261nil\u21d2 [] strm next\u2190 obj]\n\t\u21d1strm contents]'.\nHashSet understands: 'asStream\n\t[\u21d1self contents asStream]'.",
        "alto_source": "doIt [^[HashSet understands: 'contents | obj strm\n\t[strm _ (Vector new: objects length) asStream.\n\tfor% obj from: objects do%\n\t\t[obj\u0006nil? [] strm next_ obj]\n\t^strm contents]'.\nHashSet understands: 'asStream\n\t[^self contents asStream]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HashSet",
            "#understands:",
            "'contents | obj strm\\012\\011[strm _ (Vector new: objects length) asStream.\\012\\011for% obj from: objects do%\\012\\011\\011[obj\\006nil? [] strm next_ obj]\\012\\011^strm contents]'",
            "#.",
            "#HashSet",
            "#understands:",
            "'asStream\\012\\011[^self contents asStream]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HashSet understands: 'notthere: name\n\t[user notify: name asString+'' not found.'']'.",
        "alto_source": "doIt [^[HashSet understands: 'notthere: name\n\t[user notify: name asString+'' not found.'']'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HashSet",
            "#understands:",
            "'notthere: name\\012\\011[user notify: name asString+' not found.']'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'Dictionary, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'Dictionary, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'Dictionary, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'Dictionary';\n\tsubclassof: HashSet;\n\tfields: 'values'\"\n\"Dictionaries have the same lookup properties as Sets, except that they also associate a value with each object present.\"",
        "alto_source": "doIt [^[\"Class new title: 'Dictionary';\n\tsubclassof: HashSet;\n\tfields: 'values'\"\n\"Dictionaries have the same lookup properties as Sets, except that they also associate a value with each object present.\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Dictionary understands: 'init: size\n\t[values \u2190 Vector new: size. super init: size]'.",
        "alto_source": "doIt [^[Dictionary understands: 'init: size\n\t[values _ Vector new: size. super init: size]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Dictionary",
            "#understands:",
            "'init: size\\012\\011[values _ Vector new: size. super init: size]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Dictionary understands: 'insert: name with: value\n\t[self insert: name.  values\u2022(self find: name) \u2190 value]'.\nDictionary understands: '\u2022 name | x\n\t[x \u2190 self find: name\u21d2 [\u21d1values\u2022x]\n\tself notthere: name]'.\nDictionary understands: '\u2022 name \u2190 value | x\n\t[x \u2190 self find: name\u21d2 [\u21d1values\u2022x \u2190 value]\n\tself notthere: name]'.\nDictionary understands: 'lookup: name | x\n\t[x \u2190 self find: name\u21d2 [\u21d1values\u2022x] \u21d1false]'.",
        "alto_source": "doIt [^[Dictionary understands: 'insert: name with: value\n\t[self insert: name.  values!(self find: name) _ value]'.\nDictionary understands: '! name | x\n\t[x _ self find: name? [^values!x]\n\tself notthere: name]'.\nDictionary understands: '! name _ value | x\n\t[x _ self find: name? [^values!x _ value]\n\tself notthere: name]'.\nDictionary understands: 'lookup: name | x\n\t[x _ self find: name? [^values!x] ^false]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Dictionary",
            "#understands:",
            "'insert: name with: value\\012\\011[self insert: name.  values!(self find: name) _ value]'",
            "#.",
            "#Dictionary",
            "#understands:",
            "'! name | x\\012\\011[x _ self find: name? [^values!x]\\012\\011self notthere: name]'",
            "#.",
            "#Dictionary",
            "#understands:",
            "'! name _ value | x\\012\\011[x _ self find: name? [^values!x _ value]\\012\\011self notthere: name]'",
            "#.",
            "#Dictionary",
            "#understands:",
            "'lookup: name | x\\012\\011[x _ self find: name? [^values!x] ^false]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Dictionary understands: 'growto: size | name copy\n\t[copy \u2190 self class new init: size.\t\"create a copy of the new size\"\n\tfor% name from: self do%\n\t\t[copy insert: name with: self\u2022name]\t\"hash each entry into it\"\n\tself copyfrom: copy]'.\t\"then take on all its state\"\nDictionary understands: 'copyfrom: dict\n\t[self objects \u2190 dict objects copy.\n\tvalues \u2190 dict values copy]'.",
        "alto_source": "doIt [^[Dictionary understands: 'growto: size | name copy\n\t[copy _ self class new init: size.\t\"create a copy of the new size\"\n\tfor% name from: self do%\n\t\t[copy insert: name with: self!name]\t\"hash each entry into it\"\n\tself copyfrom: copy]'.\t\"then take on all its state\"\nDictionary understands: 'copyfrom: dict\n\t[self objects _ dict objects copy.\n\tvalues _ dict values copy]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Dictionary",
            "#understands:",
            "'growto: size | name copy\\012\\011[copy _ self class new init: size.\\011\"create a copy of the new size\"\\012\\011for% name from: self do%\\012\\011\\011[copy insert: name with: self!name]\\011\"hash each entry into it\"\\012\\011self copyfrom: copy]'",
            "#.",
            "#Dictionary",
            "#understands:",
            "'copyfrom: dict\\012\\011[self objects _ dict objects copy.\\012\\011values _ dict values copy]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Dictionary understands: 'values [\u21d1values]'.",
        "alto_source": "doIt [^[Dictionary understands: 'values [^values]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Dictionary",
            "#understands:",
            "'values [^values]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Dictionary understands: 'clean | name\t\"release unreferenced entries\"\n\t[for% name from: self do%\t\t\"slick, huh\"\n\t\t[(self\u2022name) refct = 1 \u21d2 [self delete: name]]]'.",
        "alto_source": "doIt [^[Dictionary understands: 'clean | name\t\"release unreferenced entries\"\n\t[for% name from: self do%\t\t\"slick, huh\"\n\t\t[(self!name) refct = 1 ? [self delete: name]]]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Dictionary",
            "#understands:",
            "'clean | name\\011\"release unreferenced entries\"\\012\\011[for% name from: self do%\\011\\011\"slick, huh\"\\012\\011\\011[(self!name) refct = 1 ? [self delete: name]]]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "Dictionary understands: 'insertall: names with: vals | i\t\t\"insert many entries\"\n\t[for% i to: names length do%\n\t\t[self insert: names\u2022i with: vals\u2022i]]'.\nDictionary understands: 'insertall: names\t\t\"default value is nil\"\n\t[self insertall: names with: (Vector new: names length)]'.",
        "alto_source": "doIt [^[Dictionary understands: 'insertall: names with: vals | i\t\t\"insert many entries\"\n\t[for% i to: names length do%\n\t\t[self insert: names!i with: vals!i]]'.\nDictionary understands: 'insertall: names\t\t\"default value is nil\"\n\t[self insertall: names with: (Vector new: names length)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Dictionary",
            "#understands:",
            "'insertall: names with: vals | i\\011\\011\"insert many entries\"\\012\\011[for% i to: names length do%\\012\\011\\011[self insert: names!i with: vals!i]]'",
            "#.",
            "#Dictionary",
            "#understands:",
            "'insertall: names\\011\\011\"default value is nil\"\\012\\011[self insertall: names with: (Vector new: names length)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'SymbolTable, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'SymbolTable, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'SymbolTable, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'SymbolTable';\n\tsubclassof: Dictionary;\n\tfields:''\"\n\"SymbolTables have the same properties as Dictionaries, except that an indirect reference is interposed between the value entries and the actual values.  This allows compiled code to point directly at a reference which remains valid although the value changes.  Notice that the define message checks in Undefined for unresolved references which the compiler may have placed there previously.\"",
        "alto_source": "doIt [^[\"Class new title: 'SymbolTable';\n\tsubclassof: Dictionary;\n\tfields:''\"\n\"SymbolTables have the same properties as Dictionaries, except that an indirect reference is interposed between the value entries and the actual values.  This allows compiled code to point directly at a reference which remains valid although the value changes.  Notice that the define message checks in Undefined for unresolved references which the compiler may have placed there previously.\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "SymbolTable understands: 'insert: name with: x\n\t[super insert: name with: (ObjectReference new value\u2190 x)]'.\nSymbolTable understands: '\u2022 name\n\t[\u21d1(super\u2022name) value]'.\nSymbolTable understands: '\u2022 name \u2190 x\n\t[\u21d1(super\u2022name) value \u2190 x]'.\nSymbolTable understands: 'ref: name\n\t[\u21d1super\u2022name]'.",
        "alto_source": "doIt [^[SymbolTable understands: 'insert: name with: x\n\t[super insert: name with: (ObjectReference new value_ x)]'.\nSymbolTable understands: '! name\n\t[^(super!name) value]'.\nSymbolTable understands: '! name _ x\n\t[^(super!name) value _ x]'.\nSymbolTable understands: 'ref: name\n\t[^super!name]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#SymbolTable",
            "#understands:",
            "'insert: name with: x\\012\\011[super insert: name with: (ObjectReference new value_ x)]'",
            "#.",
            "#SymbolTable",
            "#understands:",
            "'! name\\012\\011[^(super!name) value]'",
            "#.",
            "#SymbolTable",
            "#understands:",
            "'! name _ x\\012\\011[^(super!name) value _ x]'",
            "#.",
            "#SymbolTable",
            "#understands:",
            "'ref: name\\012\\011[^super!name]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "SymbolTable understands: 'define: name as: x\n\t[self has: name\u21d2 [self\u2022name \u2190 x]\n\tUndeclared has: name\u21d2\n\t\t[super insert: name with: (Undeclared ref: name).\n\t\tself\u2022name \u2190 x.\n\t\tUndeclared delete: name]\n\tself insert: name with: x]'.",
        "alto_source": "doIt [^[SymbolTable understands: 'define: name as: x\n\t[self has: name? [self!name _ x]\n\tUndeclared has: name?\n\t\t[super insert: name with: (Undeclared ref: name).\n\t\tself!name _ x.\n\t\tUndeclared delete: name]\n\tself insert: name with: x]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#SymbolTable",
            "#understands:",
            "'define: name as: x\\012\\011[self has: name? [self!name _ x]\\012\\011Undeclared has: name?\\012\\011\\011[super insert: name with: (Undeclared ref: name).\\012\\011\\011self!name _ x.\\012\\011\\011Undeclared delete: name]\\012\\011self insert: name with: x]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'MessageDict, '; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'MessageDict, '; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'MessageDict, '",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'MessageDict';\n\tsubclassof: HashSet;\n\tfields: 'methods \"\"<Vector of Strings> which are the compiled methods for each message\"\"\n\t\tliterals \"\"<Vector of Vectors> which hold pointers to literals used in the methods\"\"\n\t\tcode \"\"<Vector of Strings> which are the source text for each message\"\"\n\t\tbackpointers \"\"<Vector of Vectors> which are the tables of text location vs pc for each message\"\"'.\"\n\"Note that insertion and deletion return the updated dictionary.  This is because Smalltalk may be executing out of the dictionary.  The final switch to the new dictionary is made in Class with one atomic assignment.\"",
        "alto_source": "doIt [^[\"Class new title: 'MessageDict';\n\tsubclassof: HashSet;\n\tfields: 'methods \"\"<Vector of Strings> which are the compiled methods for each message\"\"\n\t\tliterals \"\"<Vector of Vectors> which hold pointers to literals used in the methods\"\"\n\t\tcode \"\"<Vector of Strings> which are the source text for each message\"\"\n\t\tbackpointers \"\"<Vector of Vectors> which are the tables of text location vs pc for each message\"\"'.\"\n\"Note that insertion and deletion return the updated dictionary.  This is because Smalltalk may be executing out of the dictionary.  The final switch to the new dictionary is made in Class with one atomic assignment.\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"hh NOTE: literals has been taken out, Methods themselves keep their literals alive\"",
        "alto_source": "doIt [^[\"hh NOTE: literals has been taken out, Methods themselves keep their literals alive\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "MessageDict understands: 'init: size\n\t[methods \u2190 Vector new: size.  \"literals \u2190 Vector new: size.\"\n\tcode \u2190 Vector new: size.  \tbackpointers \u2190 Vector new: size.\n\tsuper init: size]'.",
        "alto_source": "doIt [^[MessageDict understands: 'init: size\n\t[methods _ Vector new: size.  \"literals _ Vector new: size.\"\n\tcode _ Vector new: size.  \tbackpointers _ Vector new: size.\n\tsuper init: size]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#MessageDict",
            "#understands:",
            "'init: size\\012\\011[methods _ Vector new: size.  \"literals _ Vector new: size.\"\\012\\011code _ Vector new: size.  \\011backpointers _ Vector new: size.\\012\\011super init: size]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "MessageDict understands: 'insert: name method: m literals: l\n\t\tcode: c backpointers: b | i copy\n\t[i \u2190 self findornil: name\u21d2\t\t\"if name is already there\"\n\t\t[methods\u2022i \u2190 m. \"literals\u2022i \u2190 l.\" code\u2022i \u2190 c. backpointers\u2022i \u2190 b.\n\t\tself objects\u2022i \u2190 name]\t\t\"then do it, and return self\"\n\tcopy \u2190 self growto: methods length*2.\t\t\"Otherwise, copy\"\n\tcopy insert: name method: m literals: l\n\t\t\tcode: c backpointers: b.\t\"and insert\"\n\t\u21d1copy]\t\t\"and return the new dict without altering old\"'.",
        "alto_source": "doIt [^[MessageDict understands: 'insert: name method: m literals: l\n\t\tcode: c backpointers: b | i copy\n\t[i _ self findornil: name?\t\t\"if name is already there\"\n\t\t[methods!i _ m. \"literals!i _ l.\" code!i _ c. backpointers!i _ b.\n\t\tself objects!i _ name]\t\t\"then do it, and return self\"\n\tcopy _ self growto: methods length*2.\t\t\"Otherwise, copy\"\n\tcopy insert: name method: m literals: l\n\t\t\tcode: c backpointers: b.\t\"and insert\"\n\t^copy]\t\t\"and return the new dict without altering old\"'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#MessageDict",
            "#understands:",
            "'insert: name method: m literals: l\\012\\011\\011code: c backpointers: b | i copy\\012\\011[i _ self findornil: name?\\011\\011\"if name is already there\"\\012\\011\\011[methods!i _ m. \"literals!i _ l.\" code!i _ c. backpointers!i _ b.\\012\\011\\011self objects!i _ name]\\011\\011\"then do it, and return self\"\\012\\011copy _ self growto: methods length*2.\\011\\011\"Otherwise, copy\"\\012\\011copy insert: name method: m literals: l\\012\\011\\011\\011code: c backpointers: b.\\011\"and insert\"\\012\\011^copy]\\011\\011\"and return the new dict without altering old\"'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "MessageDict understands: 'method: name\n\t[\u21d1methods\u2022(self find: name)]'.\nMessageDict understands: 'literals: name\n\t[\u21d1(self method: name) literals\t\"hh, was: literals\u2022(self find: name)\"]'.\nMessageDict understands: 'code: name\n\t[\u21d1code\u2022(self find: name)]'.\nMessageDict understands: 'backpointers: name\n\t[\u21d1backpointers\u2022(self find: name)]'.",
        "alto_source": "doIt [^[MessageDict understands: 'method: name\n\t[^methods!(self find: name)]'.\nMessageDict understands: 'literals: name\n\t[^(self method: name) literals\t\"hh, was: literals!(self find: name)\"]'.\nMessageDict understands: 'code: name\n\t[^code!(self find: name)]'.\nMessageDict understands: 'backpointers: name\n\t[^backpointers!(self find: name)]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#MessageDict",
            "#understands:",
            "'method: name\\012\\011[^methods!(self find: name)]'",
            "#.",
            "#MessageDict",
            "#understands:",
            "'literals: name\\012\\011[^(self method: name) literals\\011\"hh, was: literals!(self find: name)\"]'",
            "#.",
            "#MessageDict",
            "#understands:",
            "'code: name\\012\\011[^code!(self find: name)]'",
            "#.",
            "#MessageDict",
            "#understands:",
            "'backpointers: name\\012\\011[^backpointers!(self find: name)]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x24\\x40\\xd2\\x82\\x25\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "MessageDict understands: 'growto: size | name copy i\n\t[copy \u2190 self class new init: size.\t\"create a copy of the new size\"\n\tfor% name from: self do%\n\t\t[i \u2190 self find: name.\t\"hash each entry into it\"\n\t\tcopy insert: name method: methods\u2022i literals: nil \"hh, was: literals\u2022i\"\n\t\t\t\tcode: code\u2022i backpointers: backpointers\u2022i]\n\t\u21d1copy]\t\t\"copy new parts\"'.",
        "alto_source": "doIt [^[MessageDict understands: 'growto: size | name copy i\n\t[copy _ self class new init: size.\t\"create a copy of the new size\"\n\tfor% name from: self do%\n\t\t[i _ self find: name.\t\"hash each entry into it\"\n\t\tcopy insert: name method: methods!i literals: nil \"hh, was: literals!i\"\n\t\t\t\tcode: code!i backpointers: backpointers!i]\n\t^copy]\t\t\"copy new parts\"'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#MessageDict",
            "#understands:",
            "'growto: size | name copy i\\012\\011[copy _ self class new init: size.\\011\"create a copy of the new size\"\\012\\011for% name from: self do%\\012\\011\\011[i _ self find: name.\\011\"hash each entry into it\"\\012\\011\\011copy insert: name method: methods!i literals: nil \"hh, was: literals!i\"\\012\\011\\011\\011\\011code: code!i backpointers: backpointers!i]\\012\\011^copy]\\011\\011\"copy new parts\"'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"INDIRECT REFERENCES\"",
        "alto_source": "doIt [^[\"INDIRECT REFERENCES\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "HasGUI? [user show: 'ObjectReference.'; flush].",
        "alto_source": "doIt [^[HasGUI? [user show: 'ObjectReference.'; flush].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#show:",
            "'ObjectReference.'",
            "#;",
            "#flush",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\x9e\\x22\\x41\\xd3\\x82\\x41\\xd4\\x90\\x7d\\x83'"
    },
    {
        "source": "\"Class new title: 'ObjectReference'\n\tfields: 'object'\"",
        "alto_source": "doIt [^[\"Class new title: 'ObjectReference'\n\tfields: 'object'\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "ObjectReference understands: 'value [\u21d1object]'.\nObjectReference understands: 'value \u2190 object'.",
        "alto_source": "doIt [^[ObjectReference understands: 'value [^object]'.\nObjectReference understands: 'value _ object'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#ObjectReference",
            "#understands:",
            "'value [^object]'",
            "#.",
            "#ObjectReference",
            "#understands:",
            "'value _ object'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x23\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "ObjectReference understands: 'printon: strm\n\t[strm append: ''->''; space; print: object class]'.",
        "alto_source": "doIt [^[ObjectReference understands: 'printon: strm\n\t[strm append: ''->''; space; print: object class]'.]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#ObjectReference",
            "#understands:",
            "'printon: strm\\012\\011[strm append: '->'; space; print: object class]'",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x82\\x7d\\x83'"
    },
    {
        "source": "\"(FieldReference skipped)\"",
        "alto_source": "doIt [^[\"(FieldReference skipped)\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "\"READ ROUTINE\"",
        "alto_source": "doIt [^[\"READ ROUTINE\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Host let: Reader understand: #of:\n\tvia: (Host method: 'of' in: Reader).\nHost let: Reader understand: #read\n\tvia: (Host method: 'read' in: Reader)",
        "alto_source": "doIt [^[Host let: Reader understand: #of:\n\tvia: (Host method: 'of' in: Reader).\nHost let: Reader understand: #read\n\tvia: (Host method: 'read' in: Reader)]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Host",
            "#let:",
            "#Reader",
            "#understand:",
            "##",
            "#of:",
            "#via:",
            "(#Host #method: 'of' #in: #Reader)",
            "#.",
            "#Host",
            "#let:",
            "#Reader",
            "#understand:",
            "##",
            "#read",
            "#via:",
            "(#Host #method: 'read' #in: #Reader)",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x05\\x00\\x00\\x06\\x41\\x22\\x23\\x41\\x40\\xd4\\x40\\xd5\\x82\\x41\\x26\\x27\\x41\\x40\\xd4\\x40\\xd5\\x83'"
    },
    {
        "source": "\"BYTE COMPILER\"",
        "alto_source": "doIt [^[\"BYTE COMPILER\"]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x01\\x00\\x00\\x06\\x7d\\x83'"
    },
    {
        "source": "Host let: Compiler understand: #compile:in:\n\tvia: (Host method: 'compileIn' in: Compiler)",
        "alto_source": "doIt [^[Host let: Compiler understand: #compile:in:\n\tvia: (Host method: 'compileIn' in: Compiler)]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Host",
            "#let:",
            "#Compiler",
            "#understand:",
            "##",
            "#compile:in:",
            "#via:",
            "(#Host #method: 'compileIn' #in: #Compiler)",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x05\\x00\\x00\\x06\\x41\\x22\\x23\\x41\\x40\\xd4\\x40\\xd5\\x83'"
    },
    {
        "source": "Host load: 'jar:/source/postboot.utf.txt'",
        "alto_source": "doIt [^[Host load: 'jar:/source/postboot.utf.txt']]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#Host",
            "#load:",
            "'jar:/source/postboot.utf.txt'",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x21\\x40\\xd2\\x83'"
    },
    {
        "source": "HasGUI? [user cr; show: 'All done.'; cr].",
        "alto_source": "doIt [^[HasGUI? [user cr; show: 'All done.'; cr].]]",
        "lexem": [
            "#doIt",
            "#[",
            "#^",
            "#[",
            "#HasGUI",
            "#?",
            "#[",
            "#user",
            "#cr",
            "#;",
            "#show:",
            "'All done.'",
            "#;",
            "#cr",
            "#]",
            "#.",
            "#]",
            "#]"
        ],
        "selector": "#doIt",
        "codes ": "b'\\x00\\x00\\x02\\x00\\x00\\x06\\x40\\xac\\x0a\\x41\\xd2\\x82\\x23\\x41\\xd4\\x82\\x41\\xd2\\x90\\x7d\\x83'"
    }
]